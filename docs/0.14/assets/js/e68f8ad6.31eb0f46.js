"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2988],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>E});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=u(n),m=r,E=p["".concat(s,".").concat(m)]||p[m]||d[m]||i;return n?a.createElement(E,o(o({ref:t},c),{},{components:n})):a.createElement(E,o({ref:t},c))}));function E(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:r,o[1]=l;for(var u=2;u<i;u++)o[u]=n[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2149:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>u});var a=n(7462),r=(n(7294),n(3905));const i={sidebar_position:1},o="BOOLEAN",l={unversionedId:"sql-syntax/data-types/boolean",id:"sql-syntax/data-types/boolean",title:"BOOLEAN",description:"The BOOLEAN data type in SQL is used to store boolean values, which can be either TRUE or FALSE. This data type is useful for representing binary states or conditions in your data.",source:"@site/docs/sql-syntax/data-types/boolean.md",sourceDirName:"sql-syntax/data-types",slug:"/sql-syntax/data-types/boolean",permalink:"/docs/0.14/sql-syntax/data-types/boolean",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"autoSidebar",previous:{title:"Data Dictionary",permalink:"/docs/0.14/sql-syntax/statements/metadata/data-dictionary"},next:{title:"Integer Types",permalink:"/docs/0.14/sql-syntax/data-types/integers"}},s={},u=[{value:"Creating a table with a BOOLEAN column",id:"creating-a-table-with-a-boolean-column",level:2},{value:"Inserting data into the BOOLEAN column",id:"inserting-data-into-the-boolean-column",level:2},{value:"Querying data from the BOOLEAN column",id:"querying-data-from-the-boolean-column",level:2},{value:"Casting between BOOLEAN and INTEGER",id:"casting-between-boolean-and-integer",level:2},{value:"Conclusion",id:"conclusion",level:2}],c={toc:u},p="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(p,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"boolean"},"BOOLEAN"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"BOOLEAN")," data type in SQL is used to store boolean values, which can be either ",(0,r.kt)("inlineCode",{parentName:"p"},"TRUE")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"FALSE"),". This data type is useful for representing binary states or conditions in your data."),(0,r.kt)("p",null,"Here's an example of how to create a table, insert data, and query data using the ",(0,r.kt)("inlineCode",{parentName:"p"},"BOOLEAN")," data type:"),(0,r.kt)("h2",{id:"creating-a-table-with-a-boolean-column"},"Creating a table with a BOOLEAN column"),(0,r.kt)("p",null,"To create a table with a BOOLEAN column, use the following SQL syntax:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE user_active (username TEXT, is_active BOOLEAN);\n")),(0,r.kt)("h2",{id:"inserting-data-into-the-boolean-column"},"Inserting data into the BOOLEAN column"),(0,r.kt)("p",null,"To insert data into the BOOLEAN column, provide the boolean values as ",(0,r.kt)("inlineCode",{parentName:"p"},"TRUE")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"FALSE"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"INSERT INTO user_active (username, is_active) VALUES\n    ('user1', TRUE),\n    ('user2', FALSE),\n    ('user3', TRUE);\n")),(0,r.kt)("h2",{id:"querying-data-from-the-boolean-column"},"Querying data from the BOOLEAN column"),(0,r.kt)("p",null,"To query data from the BOOLEAN column, use standard SQL syntax:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT username, is_active FROM user_active;\n")),(0,r.kt)("p",null,"This query will return the following result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"username | is_active\n---------|----------\nuser1    | TRUE\nuser2    | FALSE\nuser3    | TRUE\n")),(0,r.kt)("h2",{id:"casting-between-boolean-and-integer"},"Casting between BOOLEAN and INTEGER"),(0,r.kt)("p",null,"You can cast between BOOLEAN and INTEGER values:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"When casting a BOOLEAN to an INTEGER, ",(0,r.kt)("inlineCode",{parentName:"li"},"TRUE")," becomes ",(0,r.kt)("inlineCode",{parentName:"li"},"1")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"FALSE")," becomes ",(0,r.kt)("inlineCode",{parentName:"li"},"0"),"."),(0,r.kt)("li",{parentName:"ul"},"When casting an INTEGER to a BOOLEAN, ",(0,r.kt)("inlineCode",{parentName:"li"},"1")," becomes ",(0,r.kt)("inlineCode",{parentName:"li"},"TRUE")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"0")," becomes ",(0,r.kt)("inlineCode",{parentName:"li"},"FALSE"),". Other integer values will result in an error.")),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT CAST(1 AS BOOLEAN); -- Result: TRUE\nSELECT CAST(0 AS BOOLEAN); -- Result: FALSE\nSELECT CAST(TRUE AS INTEGER); -- Result: 1\nSELECT CAST(FALSE AS INTEGER); -- Result: 0\n")),(0,r.kt)("p",null,"Note that casting negative integers or integers greater than 1 to BOOLEAN will result in an error."),(0,r.kt)("h2",{id:"conclusion"},"Conclusion"),(0,r.kt)("p",null,"In summary, the ",(0,r.kt)("inlineCode",{parentName:"p"},"BOOLEAN")," data type is a simple yet powerful way to represent binary states in SQL databases. With its ability to store ",(0,r.kt)("inlineCode",{parentName:"p"},"TRUE")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"FALSE")," values, it can be used in various applications where binary conditions are necessary. Additionally, its compatibility with casting to and from INTEGER values provides added flexibility in data manipulation and querying. By understanding the basics of the BOOLEAN data type and its use cases, you can effectively use it in your database designs and operations."))}d.isMDXComponent=!0}}]);