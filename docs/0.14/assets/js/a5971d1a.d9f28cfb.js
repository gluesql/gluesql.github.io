"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[156],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>E});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),d=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},u=function(e){var t=d(e.components);return n.createElement(s.Provider,{value:t},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),p=d(a),m=r,E=p["".concat(s,".").concat(m)]||p[m]||c[m]||i;return a?n.createElement(E,l(l({ref:t},u),{},{components:a})):n.createElement(E,l({ref:t},u))}));function E(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[p]="string"==typeof e?e:r,l[1]=o;for(var d=2;d<i;d++)l[d]=a[d];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},4394:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>o,toc:()=>d});var n=a(7462),r=(a(7294),a(3905));const i={sidebar_position:6},l="DATE",o={unversionedId:"sql-syntax/data-types/date",id:"sql-syntax/data-types/date",title:"DATE",description:"In GlueSQL, the DATE data type is used to store date values in the format 'YYYY-MM-DD'. Note that GlueSQL currently does not support timezones.",source:"@site/docs/sql-syntax/data-types/date.md",sourceDirName:"sql-syntax/data-types",slug:"/sql-syntax/data-types/date",permalink:"/docs/0.14/sql-syntax/data-types/date",draft:!1,tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"autoSidebar",previous:{title:"DECIMAL",permalink:"/docs/0.14/sql-syntax/data-types/decimal"},next:{title:"TIMESTAMP",permalink:"/docs/0.14/sql-syntax/data-types/timestamp"}},s={},d=[{value:"Creating a table with DATE columns",id:"creating-a-table-with-date-columns",level:2},{value:"Inserting data into a table with DATE columns",id:"inserting-data-into-a-table-with-date-columns",level:2},{value:"Querying data from a table with DATE columns",id:"querying-data-from-a-table-with-date-columns",level:2},{value:"Filtering data using DATE columns",id:"filtering-data-using-date-columns",level:2},{value:"Performing date arithmetic",id:"performing-date-arithmetic",level:2},{value:"Handling invalid date values",id:"handling-invalid-date-values",level:2},{value:"Conclusion",id:"conclusion",level:2}],u={toc:d},p="wrapper";function c(e){let{components:t,...a}=e;return(0,r.kt)(p,(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"date"},"DATE"),(0,r.kt)("p",null,"In GlueSQL, the ",(0,r.kt)("inlineCode",{parentName:"p"},"DATE")," data type is used to store date values in the format 'YYYY-MM-DD'. Note that GlueSQL currently does not support timezones."),(0,r.kt)("h2",{id:"creating-a-table-with-date-columns"},"Creating a table with DATE columns"),(0,r.kt)("p",null,"To create a table with columns of type ",(0,r.kt)("inlineCode",{parentName:"p"},"DATE"),", use the ",(0,r.kt)("inlineCode",{parentName:"p"},"CREATE TABLE")," statement:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE DateLog (\n    id INTEGER,\n    date1 DATE,\n    date2 DATE\n);\n")),(0,r.kt)("h2",{id:"inserting-data-into-a-table-with-date-columns"},"Inserting data into a table with DATE columns"),(0,r.kt)("p",null,"To insert data into a table with ",(0,r.kt)("inlineCode",{parentName:"p"},"DATE")," columns, use the ",(0,r.kt)("inlineCode",{parentName:"p"},"INSERT INTO")," statement:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"INSERT INTO DateLog VALUES\n    (1, '2020-06-11', '2021-03-01'),\n    (2, '2020-09-30', '1989-01-01'),\n    (3, '2021-05-01', '2021-05-01');\n")),(0,r.kt)("h2",{id:"querying-data-from-a-table-with-date-columns"},"Querying data from a table with DATE columns"),(0,r.kt)("p",null,"To query data from a table with ",(0,r.kt)("inlineCode",{parentName:"p"},"DATE")," columns, use the ",(0,r.kt)("inlineCode",{parentName:"p"},"SELECT")," statement:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT id, date1, date2 FROM DateLog;\n")),(0,r.kt)("h2",{id:"filtering-data-using-date-columns"},"Filtering data using DATE columns"),(0,r.kt)("p",null,"You can use various comparison operators like ",(0,r.kt)("inlineCode",{parentName:"p"},">"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"<"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"<="),", ",(0,r.kt)("inlineCode",{parentName:"p"},">="),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"=")," to filter data based on ",(0,r.kt)("inlineCode",{parentName:"p"},"DATE")," columns:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM DateLog WHERE date1 > date2;\n\nSELECT * FROM DateLog WHERE date1 <= date2;\n\nSELECT * FROM DateLog WHERE date1 = DATE '2020-06-11';\n\nSELECT * FROM DateLog WHERE date2 < '2000-01-01';\n\nSELECT * FROM DateLog WHERE '1999-01-03' < DATE '2000-01-01';\n")),(0,r.kt)("h2",{id:"performing-date-arithmetic"},"Performing date arithmetic"),(0,r.kt)("p",null,"You can perform arithmetic operations on ",(0,r.kt)("inlineCode",{parentName:"p"},"DATE")," columns using ",(0,r.kt)("inlineCode",{parentName:"p"},"INTERVAL")," and various date arithmetic operators:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n    id,\n    date1 - date2 AS date_sub,\n    date1 - INTERVAL '1' DAY AS sub,\n    date2 + INTERVAL '1' MONTH AS add\nFROM DateLog;\n")),(0,r.kt)("h2",{id:"handling-invalid-date-values"},"Handling invalid date values"),(0,r.kt)("p",null,"If you try to insert an invalid date value into a ",(0,r.kt)("inlineCode",{parentName:"p"},"DATE")," column, GlueSQL will return an error:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"INSERT INTO DateLog VALUES (1, '12345-678', '2021-05-01');\n")),(0,r.kt)("p",null,"This will result in an error similar to the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"failed to parse date 12345-678\n")),(0,r.kt)("h2",{id:"conclusion"},"Conclusion"),(0,r.kt)("p",null,"In summary, the ",(0,r.kt)("inlineCode",{parentName:"p"},"DATE")," data type in GlueSQL allows you to store and manipulate date values in your database. You can create tables with ",(0,r.kt)("inlineCode",{parentName:"p"},"DATE")," columns, insert and query data, filter data based on date comparisons, and perform date arithmetic using various operators and intervals. Always remember to use valid date formats when inserting data into ",(0,r.kt)("inlineCode",{parentName:"p"},"DATE")," columns to avoid errors."))}c.isMDXComponent=!0}}]);