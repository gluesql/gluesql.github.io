"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7870],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>y});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=c(n),m=r,y=p["".concat(s,".").concat(m)]||p[m]||d[m]||o;return n?a.createElement(y,l(l({ref:t},u),{},{components:n})):a.createElement(y,l({ref:t},u))}));function y(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[p]="string"==typeof e?e:r,l[1]=i;for(var c=2;c<o;c++)l[c]=n[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7846:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const o={},l="CAST",i={unversionedId:"sql-syntax/functions/others/cast",id:"sql-syntax/functions/others/cast",title:"CAST",description:"The CAST function is used to convert a value from one data type to another. It is commonly used when you need to change the data type of a value or a column to perform a specific operation, such as arithmetic or string concatenation.",source:"@site/docs/sql-syntax/functions/others/cast.md",sourceDirName:"sql-syntax/functions/others",slug:"/sql-syntax/functions/others/cast",permalink:"/docs/dev/sql-syntax/functions/others/cast",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"sqlSyntaxSidebar",previous:{title:"POINT",permalink:"/docs/dev/sql-syntax/functions/geometry/point"},next:{title:"GENERATE_UUID",permalink:"/docs/dev/sql-syntax/functions/others/generate-uuid"}},s={},c=[{value:"Syntax",id:"syntax",level:2},{value:"Examples",id:"examples",level:2},{value:"Converting a value to a different data type",id:"converting-a-value-to-a-different-data-type",level:3},{value:"Converting a column to a different data type",id:"converting-a-column-to-a-different-data-type",level:3},{value:"Handling NULL values",id:"handling-null-values",level:3},{value:"Converting a value to a DATE or TIME data type",id:"converting-a-value-to-a-date-or-time-data-type",level:3},{value:"Limitations and Errors",id:"limitations-and-errors",level:2}],u={toc:c},p="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(p,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"cast"},"CAST"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"CAST")," function is used to convert a value from one data type to another. It is commonly used when you need to change the data type of a value or a column to perform a specific operation, such as arithmetic or string concatenation."),(0,r.kt)("h2",{id:"syntax"},"Syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"CAST(expression AS data_type)\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"expression"),": The value or column you want to convert."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"data_type"),": The target data type to which you want to convert the expression.")),(0,r.kt)("h2",{id:"examples"},"Examples"),(0,r.kt)("h3",{id:"converting-a-value-to-a-different-data-type"},"Converting a value to a different data type"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT CAST('TRUE' AS BOOLEAN) AS cast;\n")),(0,r.kt)("p",null,"In this example, the ",(0,r.kt)("inlineCode",{parentName:"p"},"CAST")," function is used to convert the string ",(0,r.kt)("inlineCode",{parentName:"p"},"'TRUE'")," to a boolean value."),(0,r.kt)("h3",{id:"converting-a-column-to-a-different-data-type"},"Converting a column to a different data type"),(0,r.kt)("p",null,"Suppose you have a table called ",(0,r.kt)("inlineCode",{parentName:"p"},"employees")," with the following structure:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE employees (id INT, name TEXT, salary TEXT);\n")),(0,r.kt)("p",null,"To calculate the total salary of all employees, you can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"CAST")," function to convert the ",(0,r.kt)("inlineCode",{parentName:"p"},"salary")," column to a ",(0,r.kt)("inlineCode",{parentName:"p"},"DECIMAL")," data type:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT SUM(CAST(salary AS DECIMAL)) AS total_salary FROM employees;\n")),(0,r.kt)("h3",{id:"handling-null-values"},"Handling NULL values"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"CAST")," function can handle NULL values as well. If the expression is NULL, the result will be NULL:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT CAST(NULL AS INTEGER) AS cast;\n")),(0,r.kt)("p",null,"This query will return a NULL value."),(0,r.kt)("h3",{id:"converting-a-value-to-a-date-or-time-data-type"},"Converting a value to a DATE or TIME data type"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"CAST")," function can also be used to convert strings to DATE or TIME data types:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT CAST('2023-05-04' AS DATE) AS cast_date;\nSELECT CAST('14:30:00' AS TIME) AS cast_time;\n")),(0,r.kt)("p",null,"These queries will return a date and time value, respectively."),(0,r.kt)("h2",{id:"limitations-and-errors"},"Limitations and Errors"),(0,r.kt)("p",null,"Some conversions may be impossible or result in an error. For example, trying to convert a non-numeric string to an integer will result in an error:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT CAST('foo' AS INTEGER) AS cast;\n")),(0,r.kt)("p",null,"This query will produce an error because the string ",(0,r.kt)("inlineCode",{parentName:"p"},"'foo'")," cannot be converted to an integer."))}d.isMDXComponent=!0}}]);