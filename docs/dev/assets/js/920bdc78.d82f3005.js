"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6669],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),d=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=d(e.components);return r.createElement(s.Provider,{value:t},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=d(n),f=i,m=c["".concat(s,".").concat(f)]||c[f]||p[f]||o;return n?r.createElement(m,a(a({ref:t},u),{},{components:n})):r.createElement(m,a({ref:t},u))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=f;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:i,a[1]=l;for(var d=2;d<o;d++)a[d]=n[d];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},6014:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>d});var r=n(7462),i=(n(7294),n(3905));const o={},a="DIV",l={unversionedId:"sql-syntax/functions/math/div",id:"sql-syntax/functions/math/div",title:"DIV",description:"The DIV function is used to perform integer division. It takes two arguments (a dividend and a divisor) and returns the integer quotient of the division operation. Both dividend and divisor can be FLOAT or INTEGER type. The return type of the function is INTEGER.",source:"@site/docs/sql-syntax/functions/math/div.md",sourceDirName:"sql-syntax/functions/math",slug:"/sql-syntax/functions/math/div",permalink:"/docs/dev/sql-syntax/functions/math/div",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"autoSidebar",previous:{title:"DEGREES",permalink:"/docs/dev/sql-syntax/functions/math/degrees"},next:{title:"EXP",permalink:"/docs/dev/sql-syntax/functions/math/exp"}},s={},d=[{value:"Example",id:"example",level:2},{value:"Errors",id:"errors",level:2}],u={toc:d},c="wrapper";function p(e){let{components:t,...n}=e;return(0,i.kt)(c,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"div"},"DIV"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"DIV")," function is used to perform integer division. It takes two arguments (a dividend and a divisor) and returns the integer quotient of the division operation. Both dividend and divisor can be FLOAT or INTEGER type. The return type of the function is INTEGER."),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"The following example demonstrates the usage of the ",(0,i.kt)("inlineCode",{parentName:"p"},"DIV")," function in a SQL query:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE FloatDiv (\n    dividend FLOAT DEFAULT DIV(30, 11),\n    divisor FLOAT DEFAULT DIV(3, 2)\n);\n\nINSERT INTO FloatDiv (dividend, divisor) VALUES (12.0, 3.0), (12.34, 56.78), (-12.3, 4.0);\n\nSELECT DIV(dividend, divisor) FROM FloatDiv;\n")),(0,i.kt)("p",null,"This will return the following result:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"DIV(dividend, divisor)\n4\n0\n-4\n")),(0,i.kt)("h2",{id:"errors"},"Errors"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"If the divisor is zero, a ",(0,i.kt)("inlineCode",{parentName:"li"},"DivisorShouldNotBeZero")," error will be raised."),(0,i.kt)("li",{parentName:"ol"},"If either of the arguments is not of FLOAT or INTEGER type, a ",(0,i.kt)("inlineCode",{parentName:"li"},"FunctionRequiresFloatOrIntegerValue")," error will be raised."),(0,i.kt)("li",{parentName:"ol"},"If the number of arguments provided to the function is not equal to 2, a ",(0,i.kt)("inlineCode",{parentName:"li"},"FunctionArgsLengthNotMatching")," error will be raised.")))}p.isMDXComponent=!0}}]);