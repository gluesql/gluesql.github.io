"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9565],{5680:(e,n,a)=>{a.d(n,{xA:()=>p,yg:()=>d});var t=a(6540);function l(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function r(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function i(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?r(Object(a),!0).forEach((function(n){l(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function o(e,n){if(null==e)return{};var a,t,l=function(e,n){if(null==e)return{};var a,t,l={},r=Object.keys(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||(l[a]=e[a]);return l}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var g=t.createContext({}),s=function(e){var n=t.useContext(g),a=n;return e&&(a="function"==typeof e?e(n):i(i({},n),e)),a},p=function(e){var n=s(e.components);return t.createElement(g.Provider,{value:n},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},c=t.forwardRef((function(e,n){var a=e.components,l=e.mdxType,r=e.originalType,g=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=s(a),c=l,d=u["".concat(g,".").concat(c)]||u[c]||m[c]||r;return a?t.createElement(d,i(i({ref:n},p),{},{components:a})):t.createElement(d,i({ref:n},p))}));function d(e,n){var a=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var r=a.length,i=new Array(r);i[0]=c;var o={};for(var g in n)hasOwnProperty.call(n,g)&&(o[g]=n[g]);o.originalType=e,o[u]="string"==typeof e?e:l,i[1]=o;for(var s=2;s<r;s++)i[s]=a[s];return t.createElement.apply(null,i)}return t.createElement.apply(null,a)}c.displayName="MDXCreateElement"},1279:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>g,contentTitle:()=>i,default:()=>m,frontMatter:()=>r,metadata:()=>o,toc:()=>s});var t=a(8168),l=(a(6540),a(5680));const r={sidebar_position:4},i="JSON Storage",o={unversionedId:"storages/supported-storages/json-storage",id:"storages/supported-storages/json-storage",title:"JSON Storage",description:"Introduction",source:"@site/docs/storages/supported-storages/json-storage.md",sourceDirName:"storages/supported-storages",slug:"/storages/supported-storages/json-storage",permalink:"/docs/dev/storages/supported-storages/json-storage",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"autoSidebar",previous:{title:"Sled Storage",permalink:"/docs/dev/storages/supported-storages/sled-storage"},next:{title:"WebStorage (local & session)",permalink:"/docs/dev/storages/supported-storages/web-storage"}},g={},s=[{value:"Introduction",id:"introduction",level:2},{value:"Structure",id:"structure",level:2},{value:"Schema File",id:"schema-file",level:2},{value:"Schemaless Table",id:"schemaless-table",level:3},{value:"Data File",id:"data-file",level:2},{value:"<code>*.jsonl</code> File Format",id:"jsonl-file-format",level:3},{value:"<code>*.json</code> File Format",id:"json-file-format",level:3},{value:"Examples",id:"examples",level:2},{value:"Read Existing JSON/JSONL Schemaless Files",id:"read-existing-jsonjsonl-schemaless-files",level:3},{value:"Create Schema Table",id:"create-schema-table",level:3},{value:"Limitation",id:"limitation",level:2}],p={toc:s},u="wrapper";function m(e){let{components:n,...a}=e;return(0,l.yg)(u,(0,t.A)({},p,a,{components:n,mdxType:"MDXLayout"}),(0,l.yg)("h1",{id:"json-storage"},"JSON Storage"),(0,l.yg)("h2",{id:"introduction"},"Introduction"),(0,l.yg)("p",null,"The JSON Storage system is comprised of two types of files: ",(0,l.yg)("a",{parentName:"p",href:"#schema-file"},"Schema file"),"(optional) and ",(0,l.yg)("a",{parentName:"p",href:"#data-file"},"Data file"),". The Schema file is written in Standard SQL and is responsible for storing the structure of the table. The Data file contains the actual data and supports two file formats: ",(0,l.yg)("inlineCode",{parentName:"p"},"*.json")," and ",(0,l.yg)("inlineCode",{parentName:"p"},"*.jsonl"),". This document provides detailed ",(0,l.yg)("a",{parentName:"p",href:"#examples"},"examples")," of how to create schema and read/write data using the Json Storage system. While it supports all DML features, it is particularly specialized for ",(0,l.yg)("inlineCode",{parentName:"p"},"SELECT")," and ",(0,l.yg)("inlineCode",{parentName:"p"},"APPEND INSERT"),". For further information, please refer to the ",(0,l.yg)("a",{parentName:"p",href:"#limitation"},"Limitations")," section."),(0,l.yg)("h2",{id:"structure"},"Structure"),(0,l.yg)("p",null,"JSON Storage is based on two types of files: ",(0,l.yg)("inlineCode",{parentName:"p"},"Schema")," and ",(0,l.yg)("inlineCode",{parentName:"p"},"Data"),". The ",(0,l.yg)("inlineCode",{parentName:"p"},"Schema")," file contains the definition of the structure of the data, while the ",(0,l.yg)("inlineCode",{parentName:"p"},"Data")," file contains the actual data."),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-sql"},"gluesql> CREATE TABLE User (\n    id INT,\n    name TEXT\n)\n")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-sh"},"$ ls -l\n\nUser.sql # Schema file\nUser.jsonl # Data file\n")),(0,l.yg)("h2",{id:"schema-file"},"Schema File"),(0,l.yg)("p",null,"The schema definition is saved in a file named ",(0,l.yg)("inlineCode",{parentName:"p"},"{TABLE_NAME}.sql")," using standard SQL. For example, if the table name is ",(0,l.yg)("inlineCode",{parentName:"p"},"User"),", then the schema file will be named ",(0,l.yg)("inlineCode",{parentName:"p"},"User.sql"),"."),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-sql"},"--! User.sql\nCREATE TABLE User (\n  id INT,\n  name TEXT,\n);\n")),(0,l.yg)("h3",{id:"schemaless-table"},"Schemaless Table"),(0,l.yg)("p",null,"A schemaless table is optional, and if there is no corresponding ",(0,l.yg)("inlineCode",{parentName:"p"},"{TABLE_NAME}.sql")," file, the table is schemaless. A schemaless table can save any data regardless of column name and data type."),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-sql"},"gluesql> CREATE Table User;\n")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-sh"},"$ ls -l\n\nUser.jsonl\n")),(0,l.yg)("h2",{id:"data-file"},"Data File"),(0,l.yg)("p",null,"JSON Storage saves data in two types of data files: ",(0,l.yg)("inlineCode",{parentName:"p"},"*.jsonl")," (default) and ",(0,l.yg)("inlineCode",{parentName:"p"},"*.json"),"."),(0,l.yg)("h3",{id:"jsonl-file-format"},(0,l.yg)("inlineCode",{parentName:"h3"},"*.jsonl")," File Format"),(0,l.yg)("p",null,"The ",(0,l.yg)("inlineCode",{parentName:"p"},"*.jsonl")," file format is a file containing one JSON object per line. For example:"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-json"},'{"id": 1, "name": "Glue"}\n{"id": 2, "name": "SQL"}\n')),(0,l.yg)("h3",{id:"json-file-format"},(0,l.yg)("inlineCode",{parentName:"h3"},"*.json")," File Format"),(0,l.yg)("p",null,"The ",(0,l.yg)("inlineCode",{parentName:"p"},"*.json")," file format supports two different formats:"),(0,l.yg)("ol",null,(0,l.yg)("li",{parentName:"ol"},"Array of JSON")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-json"},'[\n  {\n    "id": 1,\n    "name": "Glue"\n  },\n  {\n    "id": 2,\n    "name": "SQL"\n  }\n]\n')),(0,l.yg)("ol",{start:2},(0,l.yg)("li",{parentName:"ol"},"Single JSON")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "name": "GlueSQL"\n  "keywords": ["Database, Rust"]\n  "stars": 999999\n}\n')),(0,l.yg)("h2",{id:"examples"},"Examples"),(0,l.yg)("h3",{id:"read-existing-jsonjsonl-schemaless-files"},"Read Existing JSON/JSONL Schemaless Files"),(0,l.yg)("ol",null,(0,l.yg)("li",{parentName:"ol"},"Locate your JSON/JSONL schemaless files in the data path. Here, we use ",(0,l.yg)("inlineCode",{parentName:"li"},"./data"),".")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre"},"$ ls -rlt ./data\n\nUser.json\nLoginHistory.jsonl\n")),(0,l.yg)("p",null,"Keep in mind that if there are no ",(0,l.yg)("inlineCode",{parentName:"p"},"*.sql")," files, the data is considered schemaless, meaning that the number of columns in each row may vary."),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-json"},'//! User.json\n[\n  {\n    "id": 1,\n    "name": "Alice",\n    "location": "New York"\n  },\n  {\n    "id": 2,\n    "name": "Bob",\n    "language": "Rust"\n  },\n  {\n    "id": 3,\n    "name": "Eve"\n  }\n]\n')),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-json"},'//! LoginHistory.jsonl\n{"timestamp": "2023-05-01T14:36:22.000Z", "userId": 1, "action": "login"}\n{"timestamp": "2023-05-01T14:38:17.000Z", "userId": 2, "action": "logout"}\n{"timestamp": "2023-05-02T08:12:05.000Z", "userId": 2, "action": "logout"}\n{"timestamp": "2023-05-02T09:45:13.000Z", "userId": 3, "action": "login"}\n{"timestamp": "2023-05-03T16:21:44.000Z", "userId": 1, "action": "logout"}\n')),(0,l.yg)("ol",{start:2},(0,l.yg)("li",{parentName:"ol"},"Read with GlueSQL JSON Storage")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-rust"},'let path = "./data/";\nlet json_storage = JsonStorage::new(path).unwrap();\nlet mut glue = Glue::new(json_storage);\n\nglue.execute("\nSELECT *\nFROM User U\nJOIN LoginHistory L ON U.id = L.userId;\n");\n')),(0,l.yg)("table",null,(0,l.yg)("thead",{parentName:"table"},(0,l.yg)("tr",{parentName:"thead"},(0,l.yg)("th",{parentName:"tr",align:null},"action"),(0,l.yg)("th",{parentName:"tr",align:null},"id"),(0,l.yg)("th",{parentName:"tr",align:null},"language"),(0,l.yg)("th",{parentName:"tr",align:null},"location"),(0,l.yg)("th",{parentName:"tr",align:null},"name"),(0,l.yg)("th",{parentName:"tr",align:null},"timestamp"),(0,l.yg)("th",{parentName:"tr",align:null},"userId"))),(0,l.yg)("tbody",{parentName:"table"},(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"login"),(0,l.yg)("td",{parentName:"tr",align:null},"1"),(0,l.yg)("td",{parentName:"tr",align:null}),(0,l.yg)("td",{parentName:"tr",align:null},"New York"),(0,l.yg)("td",{parentName:"tr",align:null},"Alice"),(0,l.yg)("td",{parentName:"tr",align:null},"2023-05-01T14:36:22.000Z"),(0,l.yg)("td",{parentName:"tr",align:null},"1")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"logout"),(0,l.yg)("td",{parentName:"tr",align:null},"1"),(0,l.yg)("td",{parentName:"tr",align:null}),(0,l.yg)("td",{parentName:"tr",align:null},"New York"),(0,l.yg)("td",{parentName:"tr",align:null},"Alice"),(0,l.yg)("td",{parentName:"tr",align:null},"2023-05-03T16:21:44.000Z"),(0,l.yg)("td",{parentName:"tr",align:null},"1")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"logout"),(0,l.yg)("td",{parentName:"tr",align:null},"2"),(0,l.yg)("td",{parentName:"tr",align:null},"Rust"),(0,l.yg)("td",{parentName:"tr",align:null}),(0,l.yg)("td",{parentName:"tr",align:null},"Bob"),(0,l.yg)("td",{parentName:"tr",align:null},"2023-05-01T14:38:17.000Z"),(0,l.yg)("td",{parentName:"tr",align:null},"2")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"logout"),(0,l.yg)("td",{parentName:"tr",align:null},"2"),(0,l.yg)("td",{parentName:"tr",align:null},"Rust"),(0,l.yg)("td",{parentName:"tr",align:null}),(0,l.yg)("td",{parentName:"tr",align:null},"Bob"),(0,l.yg)("td",{parentName:"tr",align:null},"2023-05-02T08:12:05.000Z"),(0,l.yg)("td",{parentName:"tr",align:null},"2")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"login"),(0,l.yg)("td",{parentName:"tr",align:null},"3"),(0,l.yg)("td",{parentName:"tr",align:null}),(0,l.yg)("td",{parentName:"tr",align:null}),(0,l.yg)("td",{parentName:"tr",align:null},"Eve"),(0,l.yg)("td",{parentName:"tr",align:null},"2023-05-02T09:45:13.000Z"),(0,l.yg)("td",{parentName:"tr",align:null},"3")))),(0,l.yg)("h3",{id:"create-schema-table"},"Create Schema Table"),(0,l.yg)("ol",null,(0,l.yg)("li",{parentName:"ol"},"Create Table")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-rust"},'let path = "./data/";\nlet json_storage = JsonStorage::new(path).unwrap();\nlet mut glue = Glue::new(json_storage);\n\nglue.execute("\nCREATE TABLE Account (\n  accountId INT NOT NULL,\n  accountOwner TEXT NOT NULL,\n  accountType TEXT NOT NULL,\n  balance INT NOT NULL,\n  isActive BOOLEAN NOT NULL\n);\n");\n')),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-sh"},"$ ls -l\n\nAccount.sql\nAccount.jsonl\n")),(0,l.yg)("ol",{start:2},(0,l.yg)("li",{parentName:"ol"},"Verity Schema file")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-sql"},"--! Account.sql\nCREATE TABLE Account (\n  accountId INT NOT NULL,\n  accountOwner TEXT NOT NULL,\n  accountType TEXT NOT NULL,\n  balance INT NOT NULL,\n  isActive BOOLEAN NOT NULL\n);\n")),(0,l.yg)("ol",{start:3},(0,l.yg)("li",{parentName:"ol"},"Insert data")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-rust"},"glue.execute(\"\nINSERT INTO Account VALUES\n  (10001, 'John Smith', 'Checking', 5000, true),\n  (10002, 'Jane Doe', 'Savings', 10000, true),\n  (10003, 'Robert Johnson', 'Checking', 2500, false),\n  (10004, 'Alice Kim', 'Savings', 7500, true),\n  (10005, 'Michael Chen', 'Checking', 10000, true);\n\");\n")),(0,l.yg)("ol",{start:4},(0,l.yg)("li",{parentName:"ol"},"Select data")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-rust"},'glue.execute("SELECT * FROM Account;");\n')),(0,l.yg)("table",null,(0,l.yg)("thead",{parentName:"table"},(0,l.yg)("tr",{parentName:"thead"},(0,l.yg)("th",{parentName:"tr",align:null},"accountId"),(0,l.yg)("th",{parentName:"tr",align:null},"accountOwner"),(0,l.yg)("th",{parentName:"tr",align:null},"accountType"),(0,l.yg)("th",{parentName:"tr",align:null},"balance"),(0,l.yg)("th",{parentName:"tr",align:null},"isActive"))),(0,l.yg)("tbody",{parentName:"table"},(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"10001"),(0,l.yg)("td",{parentName:"tr",align:null},"John Smith"),(0,l.yg)("td",{parentName:"tr",align:null},"Checking"),(0,l.yg)("td",{parentName:"tr",align:null},"5000"),(0,l.yg)("td",{parentName:"tr",align:null},"TRUE")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"10002"),(0,l.yg)("td",{parentName:"tr",align:null},"Jane Doe"),(0,l.yg)("td",{parentName:"tr",align:null},"Savings"),(0,l.yg)("td",{parentName:"tr",align:null},"10000"),(0,l.yg)("td",{parentName:"tr",align:null},"TRUE")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"10003"),(0,l.yg)("td",{parentName:"tr",align:null},"Robert Johnson"),(0,l.yg)("td",{parentName:"tr",align:null},"Checking"),(0,l.yg)("td",{parentName:"tr",align:null},"2500"),(0,l.yg)("td",{parentName:"tr",align:null},"FALSE")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"10004"),(0,l.yg)("td",{parentName:"tr",align:null},"Alice Kim"),(0,l.yg)("td",{parentName:"tr",align:null},"Savings"),(0,l.yg)("td",{parentName:"tr",align:null},"7500"),(0,l.yg)("td",{parentName:"tr",align:null},"TRUE")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"10005"),(0,l.yg)("td",{parentName:"tr",align:null},"Michael Chen"),(0,l.yg)("td",{parentName:"tr",align:null},"Checking"),(0,l.yg)("td",{parentName:"tr",align:null},"10000"),(0,l.yg)("td",{parentName:"tr",align:null},"TRUE")))),(0,l.yg)("ol",{start:5},(0,l.yg)("li",{parentName:"ol"},"Verify Data file")),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-json"},'//! Account.jsonl\n{"accountId":10001,"accountOwner":"John Smith","accountType":"Checking","balance":5000,"isActive":true}\n{"accountId":10002,"accountOwner":"Jane Doe","accountType":"Savings","balance":10000,"isActive":true}\n{"accountId":10003,"accountOwner":"Robert Johnson","accountType":"Checking","balance":2500,"isActive":false}\n{"accountId":10004,"accountOwner":"Alice Kim","accountType":"Savings","balance":7500,"isActive":true}\n{"accountId":10005,"accountOwner":"Michael Chen","accountType":"Checking","balance":10000,"isActive":true}\n')),(0,l.yg)("h2",{id:"limitation"},"Limitation"),(0,l.yg)("p",null,"JSON Storage is capable of supporting a variety of operations, including ",(0,l.yg)("inlineCode",{parentName:"p"},"SELECT"),", ",(0,l.yg)("inlineCode",{parentName:"p"},"INSERT"),", ",(0,l.yg)("inlineCode",{parentName:"p"},"DELETE"),", and ",(0,l.yg)("inlineCode",{parentName:"p"},"UPDATE"),".",(0,l.yg)("br",{parentName:"p"}),"\n","However, its design primarily emphasizes ",(0,l.yg)("inlineCode",{parentName:"p"},"SELECT")," and ",(0,l.yg)("inlineCode",{parentName:"p"},"APPEND INSERT")," functionality.",(0,l.yg)("br",{parentName:"p"}),"\n","It's important to note that if you perform ",(0,l.yg)("inlineCode",{parentName:"p"},"DELETE"),", ",(0,l.yg)("inlineCode",{parentName:"p"},"UPDATE"),", or ",(0,l.yg)("inlineCode",{parentName:"p"},"INSERT in the middle of the rows"),", it can cause the internal rewriting of all the rows, which can lead to a decrease in performance."))}m.isMDXComponent=!0}}]);