"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[846],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>f});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var m=r.createContext({}),c=function(e){var t=r.useContext(m),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=c(e.components);return r.createElement(m.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,m=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=c(n),d=i,f=u["".concat(m,".").concat(d)]||u[d]||p[d]||a;return n?r.createElement(f,o(o({ref:t},s),{},{components:n})):r.createElement(f,o({ref:t},s))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=d;var l={};for(var m in t)hasOwnProperty.call(t,m)&&(l[m]=t[m]);l.originalType=e,l[u]="string"==typeof e?e:i,o[1]=l;for(var c=2;c<a;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},488:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var r=n(7462),i=(n(7294),n(3905));const a={},o="Trimming",l={unversionedId:"ast-builder/functions/text/trimming",id:"ast-builder/functions/text/trimming",title:"Trimming",description:"GlueSQL provides several text trimming functions that allow you to remove leading or trailing characters from a text string.",source:"@site/docs/ast-builder/functions/text/trimming.md",sourceDirName:"ast-builder/functions/text",slug:"/ast-builder/functions/text/trimming",permalink:"/docs/dev/ast-builder/functions/text/trimming",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"autoSidebar",previous:{title:"Text Manipulation",permalink:"/docs/dev/ast-builder/functions/text/text-manipulation"},next:{title:"Basic Arithmetic",permalink:"/docs/dev/ast-builder/functions/math/basic-arithmetic"}},m={},c=[{value:"Right Trimming - rtrim",id:"right-trimming---rtrim",level:2},{value:"Left Trimming - ltrim",id:"left-trimming---ltrim",level:2},{value:"Right and Left Trimming",id:"right-and-left-trimming",level:2}],s={toc:c},u="wrapper";function p(e){let{components:t,...n}=e;return(0,i.kt)(u,(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"trimming"},"Trimming"),(0,i.kt)("p",null,"GlueSQL provides several text trimming functions that allow you to remove leading or trailing characters from a text string."),(0,i.kt)("p",null,"For this tutorial, we assume there's a table named ",(0,i.kt)("inlineCode",{parentName:"p"},"Food")," with an ",(0,i.kt)("inlineCode",{parentName:"p"},"id")," column of ",(0,i.kt)("inlineCode",{parentName:"p"},"INTEGER")," type and a ",(0,i.kt)("inlineCode",{parentName:"p"},"name")," column of ",(0,i.kt)("inlineCode",{parentName:"p"},"TEXT")," type."),(0,i.kt)("h2",{id:"right-trimming---rtrim"},"Right Trimming - rtrim"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"rtrim")," function removes trailing characters from a text string. You can specify the characters to be removed as an argument to the function. If no argument is provided, it trims spaces by default."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'// Trims trailing spaces from "chicken   "\nlet test_text = text("chicken   ").rtrim(Some(text(" ")));\n\nlet actual = table("Food")\n    .insert()\n    .columns("id, name")\n    .values(vec![vec![num(1), test_text]])\n    .execute(glue)\n    .await;\n')),(0,i.kt)("h2",{id:"left-trimming---ltrim"},"Left Trimming - ltrim"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"ltrim")," function removes leading characters from a text string. You can specify the characters to be removed as an argument to the function. If no argument is provided, it trims spaces by default."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'// Trims leading spaces from "   chicken"\nlet test_text = ltrim(text("   chicken"), Some(text(" ")));\n\nlet actual = table("Food")\n    .insert()\n    .columns("id, name")\n    .values(vec![vec![num(2), test_text]])\n    .execute(glue)\n    .await;\n')),(0,i.kt)("h2",{id:"right-and-left-trimming"},"Right and Left Trimming"),(0,i.kt)("p",null,"You can combine ",(0,i.kt)("inlineCode",{parentName:"p"},"rtrim")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"ltrim")," to trim both sides of a string:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'// Trims leading "ch" and trailing spaces from "chicken"\nlet test_text = text("chicken").ltrim(Some(text("ch"))).rtrim(None);\n\nlet actual = table("Food")\n    .insert()\n    .columns("id, name")\n    .values(vec![vec![num(3), test_text]])\n    .execute(glue)\n    .await;\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'// Trims trailing "en" and leading spaces from "chicken"\nlet test_text = text("chicken").rtrim(Some(text("en"))).ltrim(None);\n\nlet actual = table("Food")\n    .insert()\n    .columns("id, name")\n    .values(vec![vec![num(4), test_text]])\n    .execute(glue)\n    .await;\n')))}p.isMDXComponent=!0}}]);