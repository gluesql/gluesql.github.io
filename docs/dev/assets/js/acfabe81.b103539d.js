"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[998],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>v});var o=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,i=function(e,t){if(null==e)return{};var n,o,i={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=o.createContext({}),c=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},m=function(e){var t=c(e.components);return o.createElement(l.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),p=c(n),u=i,v=p["".concat(l,".").concat(u)]||p[u]||d[u]||a;return n?o.createElement(v,r(r({ref:t},m),{},{components:n})):o.createElement(v,r({ref:t},m))}));function v(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,r=new Array(a);r[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:i,r[1]=s;for(var c=2;c<a;c++)r[c]=n[c];return o.createElement.apply(null,r)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},6712:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var o=n(7462),i=(n(7294),n(3905));const a={},r="Conversion",s={unversionedId:"ast-builder/functions/date-&-time/conversion",id:"ast-builder/functions/date-&-time/conversion",title:"Conversion",description:"GlueSQL provides date and time conversion functions that allow you to convert text data to datetime data types such as Date, Time, and Timestamp. These functions are todate, totime, and to_timestamp.",source:"@site/docs/ast-builder/functions/date-&-time/conversion.md",sourceDirName:"ast-builder/functions/date-&-time",slug:"/ast-builder/functions/date-&-time/conversion",permalink:"/docs/dev/docs/ast-builder/functions/date-&-time/conversion",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"astBuilderSidebar",previous:{title:"Trigonometric",permalink:"/docs/dev/docs/ast-builder/functions/math/trigonometric"},next:{title:"Current Date and Time",permalink:"/docs/dev/docs/ast-builder/functions/date-&-time/current-date-and-time"}},l={},c=[{value:"Date Conversion - to_date",id:"date-conversion---to_date",level:2},{value:"Time Conversion - to_time",id:"time-conversion---to_time",level:2},{value:"Timestamp Conversion - to_timestamp",id:"timestamp-conversion---to_timestamp",level:2}],m={toc:c},p="wrapper";function d(e){let{components:t,...n}=e;return(0,i.kt)(p,(0,o.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"conversion"},"Conversion"),(0,i.kt)("p",null,"GlueSQL provides date and time conversion functions that allow you to convert text data to datetime data types such as Date, Time, and Timestamp. These functions are ",(0,i.kt)("inlineCode",{parentName:"p"},"to_date"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"to_time"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"to_timestamp"),"."),(0,i.kt)("p",null,"For this tutorial, we assume there's a table named ",(0,i.kt)("inlineCode",{parentName:"p"},"Visitor")," with various columns including ",(0,i.kt)("inlineCode",{parentName:"p"},"visit_date"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"visit_time"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"visit_time_stamp")," which are of ",(0,i.kt)("inlineCode",{parentName:"p"},"TEXT")," type."),(0,i.kt)("h2",{id:"date-conversion---to_date"},"Date Conversion - to_date"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"to_date")," function converts a text string to a date."),(0,i.kt)("p",null,"There are two ways to call the ",(0,i.kt)("inlineCode",{parentName:"p"},"to_date")," function in GlueSQL:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'let actual = table("Visitor")\n    .select()\n    .project("id")\n    .project("name")\n    .project(col("visit_date").to_date("\'%Y-%m-%d\'"))  // Method 1: Calling the to_date method on a column\n    .project(to_date("visit_date", "\'%Y-%m-%d\'"))  // Method 2: Using the to_date function directly\n    .execute(glue)\n    .await;\n')),(0,i.kt)("h2",{id:"time-conversion---to_time"},"Time Conversion - to_time"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"to_time")," function converts a text string to a time."),(0,i.kt)("p",null,"There are two ways to call the ",(0,i.kt)("inlineCode",{parentName:"p"},"to_time")," function in GlueSQL:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'let actual = table("Visitor")\n    .select()\n    .project("id")\n    .project("name")\n    .project(col("visit_time").to_time("\'%H:%M:%S\'"))  // Method 1: Calling the to_time method on a column\n    .project(to_time("visit_time", "\'%H:%M:%S\'"))  // Method 2: Using the to_time function directly\n    .execute(glue)\n    .await;\n')),(0,i.kt)("h2",{id:"timestamp-conversion---to_timestamp"},"Timestamp Conversion - to_timestamp"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"to_timestamp")," function converts a text string to a timestamp."),(0,i.kt)("p",null,"There are two ways to call the ",(0,i.kt)("inlineCode",{parentName:"p"},"to_timestamp")," function in GlueSQL:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'let actual = table("Visitor")\n    .select()\n    .project("id")\n    .project("name")\n    .project(col("visit_time_stamp").to_timestamp("\'%Y-%m-%d %H:%M:%S\'"))  // Method 1: Calling the to_timestamp method on a column\n    .project(to_timestamp("visit_time_stamp", "\'%Y-%m-%d %H:%M:%S\'"))  // Method 2: Using the to_timestamp function directly\n    .execute(glue)\n    .await;\n')))}d.isMDXComponent=!0}}]);