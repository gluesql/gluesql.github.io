"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9586],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>m});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),u=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},d=function(e){var t=u(e.components);return n.createElement(s.Provider,{value:t},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},g=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=u(a),g=r,m=c["".concat(s,".").concat(g)]||c[g]||p[g]||o;return a?n.createElement(m,i(i({ref:t},d),{},{components:a})):n.createElement(m,i({ref:t},d))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=g;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:r,i[1]=l;for(var u=2;u<o;u++)i[u]=a[u];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}g.displayName="MDXCreateElement"},1078:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>u});var n=a(7462),r=(a(7294),a(3905));const o={sidebar_position:2},i="Using Preloaded Data",l={unversionedId:"ast-builder/statements/querying/using-preloaded-data",id:"ast-builder/statements/querying/using-preloaded-data",title:"Using Preloaded Data",description:"This guide will show you how to use AST Builder to query data that has already been loaded into memory, as opposed to querying data from storage. This is similar to SQL's VALUES functionality.",source:"@site/docs/ast-builder/statements/querying/using-preloaded-data.md",sourceDirName:"ast-builder/statements/querying",slug:"/ast-builder/statements/querying/using-preloaded-data",permalink:"/docs/dev/docs/ast-builder/statements/querying/using-preloaded-data",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"astBuilderSidebar",previous:{title:"Fetching Data from Storage",permalink:"/docs/dev/docs/ast-builder/statements/querying/fetching-data-from-storage"},next:{title:"Creating Derived Subqueries",permalink:"/docs/dev/docs/ast-builder/statements/querying/creating-derived-subqueries"}},s={},u=[{value:"Creating a Values Object",id:"creating-a-values-object",level:2},{value:"Sorting Results (ORDER BY)",id:"sorting-results-order-by",level:2},{value:"Pagination (OFFSET, LIMIT)",id:"pagination-offset-limit",level:2},{value:"Querying Preloaded Data",id:"querying-preloaded-data",level:2}],d={toc:u},c="wrapper";function p(e){let{components:t,...a}=e;return(0,r.kt)(c,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"using-preloaded-data"},"Using Preloaded Data"),(0,r.kt)("p",null,"This guide will show you how to use AST Builder to query data that has already been loaded into memory, as opposed to querying data from storage. This is similar to SQL's ",(0,r.kt)("inlineCode",{parentName:"p"},"VALUES")," functionality. "),(0,r.kt)("h2",{id:"creating-a-values-object"},"Creating a Values Object"),(0,r.kt)("p",null,"To create a ",(0,r.kt)("inlineCode",{parentName:"p"},"values()")," object, you can either provide a vector of strings or a vector of vectors of strings. Each inner vector represents a row of data, and each string within the inner vector represents a value in that row."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'use gluesql_core::ast_builder::values;\n\nlet actual = values(vec!["1, \'Glue\'", "2, \'SQL\'", "3, \'Rust\'"])\n    .execute(glue)\n    .await;\n\nlet actual = values(vec![\n    vec!["1", "\'Glue\'"],\n    vec!["2", "\'SQL\'"],\n    vec!["3", "\'Rust\'"],\n])\n.execute(glue)\n.await;\n')),(0,r.kt)("h2",{id:"sorting-results-order-by"},"Sorting Results (ORDER BY)"),(0,r.kt)("p",null,"To sort the results of a ",(0,r.kt)("inlineCode",{parentName:"p"},"values()")," query, use the ",(0,r.kt)("inlineCode",{parentName:"p"},"order_by()")," method."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'let actual = values(vec!["1, \'Glue\'", "2, \'SQL\'", "3, \'Rust\'"])\n    .order_by("column2 desc")\n    .execute(glue)\n    .await;\n')),(0,r.kt)("h2",{id:"pagination-offset-limit"},"Pagination (OFFSET, LIMIT)"),(0,r.kt)("p",null,"You can paginate the results of a ",(0,r.kt)("inlineCode",{parentName:"p"},"values()")," query using the ",(0,r.kt)("inlineCode",{parentName:"p"},"offset()")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"limit()")," methods."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"let actual = values(vec![\"1, 'Glue'\", \"2, 'SQL'\", \"3, 'Rust'\"])\n    .offset(1)\n    .execute(glue)\n    .await;\n\nlet actual = values(vec![\"1, 'Glue'\", \"2, 'SQL'\", \"3, 'Rust'\"])\n    .limit(2)\n    .execute(glue)\n    .await;\n")),(0,r.kt)("h2",{id:"querying-preloaded-data"},"Querying Preloaded Data"),(0,r.kt)("p",null,"To query preloaded data using the ",(0,r.kt)("inlineCode",{parentName:"p"},"values()")," object, you can call the ",(0,r.kt)("inlineCode",{parentName:"p"},"select()")," method, and then use the ",(0,r.kt)("inlineCode",{parentName:"p"},"project()")," method to specify the columns you want to include in the result."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'let actual = values(vec!["1, \'Glue\'", "2, \'SQL\'", "3, \'Rust\'"])\n    .alias_as("Sub")\n    .select()\n    .project("column1 AS id")\n    .project("column2 AS name")\n    .execute(glue)\n    .await;\n')))}p.isMDXComponent=!0}}]);