"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5334],{5680:(e,n,t)=>{t.d(n,{xA:()=>g,yg:()=>d});var l=t(6540);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);n&&(l=l.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,l)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,l,a=function(e,n){if(null==e)return{};var t,l,a={},r=Object.keys(e);for(l=0;l<r.length;l++)t=r[l],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(l=0;l<r.length;l++)t=r[l],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var o=l.createContext({}),u=function(e){var n=l.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},g=function(e){var n=u(e.components);return l.createElement(o.Provider,{value:n},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return l.createElement(l.Fragment,{},n)}},y=l.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,o=e.parentName,g=s(e,["components","mdxType","originalType","parentName"]),p=u(t),y=a,d=p["".concat(o,".").concat(y)]||p[y]||c[y]||r;return t?l.createElement(d,i(i({ref:n},g),{},{components:t})):l.createElement(d,i({ref:n},g))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,i=new Array(r);i[0]=y;var s={};for(var o in n)hasOwnProperty.call(n,o)&&(s[o]=n[o]);s.originalType=e,s[p]="string"==typeof e?e:a,i[1]=s;for(var u=2;u<r;u++)i[u]=t[u];return l.createElement.apply(null,i)}return l.createElement.apply(null,t)}y.displayName="MDXCreateElement"},6103:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>i,default:()=>c,frontMatter:()=>r,metadata:()=>s,toc:()=>u});var l=t(8168),a=(t(6540),t(5680));const r={},i="SLICE",s={unversionedId:"sql-syntax/functions/list-map/slice",id:"sql-syntax/functions/list-map/slice",title:"SLICE",description:"The SLICE statement is a function in GlueSQL that allows you to retrieve a subsection of a list. It is analogous to slicing operations in many programming languages.",source:"@site/docs/sql-syntax/functions/list-map/slice.md",sourceDirName:"sql-syntax/functions/list-map",slug:"/sql-syntax/functions/list-map/slice",permalink:"/docs/dev/sql-syntax/functions/list-map/slice",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"autoSidebar",previous:{title:"PREPEND",permalink:"/docs/dev/sql-syntax/functions/list-map/prepend"},next:{title:'SQL Function - "SPLICE"',permalink:"/docs/dev/sql-syntax/functions/list-map/splice"}},o={},u=[{value:"Syntax",id:"syntax",level:2},{value:"Examples",id:"examples",level:2},{value:"1. Basic Slicing",id:"1-basic-slicing",level:3},{value:"2. Slicing Beyond List Length",id:"2-slicing-beyond-list-length",level:3},{value:"3. Start Index Beyond List Length",id:"3-start-index-beyond-list-length",level:3},{value:"4. Using Negative Start Index",id:"4-using-negative-start-index",level:3},{value:"Errors",id:"errors",level:2}],g={toc:u},p="wrapper";function c(e){let{components:n,...t}=e;return(0,a.yg)(p,(0,l.A)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"slice"},"SLICE"),(0,a.yg)("p",null,"The ",(0,a.yg)("inlineCode",{parentName:"p"},"SLICE")," statement is a function in GlueSQL that allows you to retrieve a subsection of a list. It is analogous to slicing operations in many programming languages."),(0,a.yg)("h2",{id:"syntax"},"Syntax"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-sql"},"SELECT SLICE(column_name, start_index, length) AS alias_name FROM table_name;\n")),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"column_name"),": Name of the column containing the list."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"start_index"),": The starting index from where the slice should begin. This value can be negative."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"length"),": The number of elements to be included in the slice.")),(0,a.yg)("h2",{id:"examples"},"Examples"),(0,a.yg)("p",null,"Consider the following table ",(0,a.yg)("inlineCode",{parentName:"p"},"Test"),":"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE Test (\n    list LIST\n);\n")),(0,a.yg)("p",null,"With the following data:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-sql"},"INSERT INTO Test VALUES\n('[1,2,3,4]');\n")),(0,a.yg)("h3",{id:"1-basic-slicing"},"1. Basic Slicing"),(0,a.yg)("p",null,"Retrieve the first 2 elements from a list."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-sql"},"SELECT SLICE(list, 0, 2) AS value FROM Test;\n")),(0,a.yg)("p",null,"Result:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"[1, 2]\n")),(0,a.yg)("h3",{id:"2-slicing-beyond-list-length"},"2. Slicing Beyond List Length"),(0,a.yg)("p",null,"If the combined start index and length exceed the list size, ",(0,a.yg)("inlineCode",{parentName:"p"},"SLICE")," will return all possible elements without error."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-sql"},"SELECT SLICE(list, 2, 5) AS value FROM Test;\n")),(0,a.yg)("p",null,"Result:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"[3, 4]\n")),(0,a.yg)("h3",{id:"3-start-index-beyond-list-length"},"3. Start Index Beyond List Length"),(0,a.yg)("p",null,"If the start index alone exceeds the list size, ",(0,a.yg)("inlineCode",{parentName:"p"},"SLICE")," will return an empty list."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-sql"},"SELECT SLICE(list, 100, 5) AS value FROM Test;\n")),(0,a.yg)("p",null,"Result:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"[]\n")),(0,a.yg)("h3",{id:"4-using-negative-start-index"},"4. Using Negative Start Index"),(0,a.yg)("p",null,"A negative start index counts from the end of the list."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-sql"},"SELECT SLICE(list, -1, 1) AS value FROM Test;\n")),(0,a.yg)("p",null,"Result:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"[4]\n")),(0,a.yg)("p",null,"Another example of a negative start index."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-sql"},"SELECT SLICE(list, -2, 4) AS value FROM Test;\n")),(0,a.yg)("p",null,"Result:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"[3, 4]\n")),(0,a.yg)("p",null,"If the absolute value of the negative start index exceeds the list length, it is treated as index 0."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-sql"},"SELECT SLICE(list, -234, 4) AS value FROM Test;\n")),(0,a.yg)("p",null,"Result:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"[1, 2, 3, 4]\n")),(0,a.yg)("h2",{id:"errors"},"Errors"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"Using a non-list value for slicing will result in an error: ",(0,a.yg)("inlineCode",{parentName:"li"},"ListTypeRequired"),"."),(0,a.yg)("li",{parentName:"ul"},"Using a non-integer value for the start index or length will result in an error: ",(0,a.yg)("inlineCode",{parentName:"li"},'FunctionRequiresIntegerValue("SLICE")'),".")))}c.isMDXComponent=!0}}]);