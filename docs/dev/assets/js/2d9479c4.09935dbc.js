"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2809],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>m});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),p=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},c=function(e){var n=p(e.components);return r.createElement(l.Provider,{value:n},e.children)},u="mdxType",E={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=p(t),d=a,m=u["".concat(l,".").concat(d)]||u[d]||E[d]||o;return t?r.createElement(m,s(s({ref:n},c),{},{components:t})):r.createElement(m,s({ref:n},c))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,s=new Array(o);s[0]=d;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i[u]="string"==typeof e?e:a,s[1]=i;for(var p=2;p<o;p++)s[p]=t[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},7885:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>E,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var r=t(7462),a=(t(7294),t(3905));const o={sidebar_position:1},s="WHERE",i={unversionedId:"sql-syntax/statements/querying/where",id:"sql-syntax/statements/querying/where",title:"WHERE",description:"In GlueSQL, the WHERE clause is used to filter the results of a SELECT query based on specific conditions. The WHERE clause can be used with various operators and functions to create complex filtering conditions.",source:"@site/docs/sql-syntax/statements/querying/where.md",sourceDirName:"sql-syntax/statements/querying",slug:"/sql-syntax/statements/querying/where",permalink:"/docs/canary/docs/sql-syntax/statements/querying/where",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"sqlSyntaxSidebar",previous:{title:"Introduction",permalink:"/docs/canary/docs/sql-syntax/intro"},next:{title:"JOIN",permalink:"/docs/canary/docs/sql-syntax/statements/querying/join"}},l={},p=[{value:"Comparison Operators",id:"comparison-operators",level:2},{value:"BETWEEN Operator",id:"between-operator",level:2},{value:"EXISTS and NOT EXISTS",id:"exists-and-not-exists",level:2},{value:"IN Operator",id:"in-operator",level:2},{value:"LIKE and ILIKE Operators",id:"like-and-ilike-operators",level:2}],c={toc:p},u="wrapper";function E(e){let{components:n,...t}=e;return(0,a.kt)(u,(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"where"},"WHERE"),(0,a.kt)("p",null,"In GlueSQL, the ",(0,a.kt)("inlineCode",{parentName:"p"},"WHERE")," clause is used to filter the results of a ",(0,a.kt)("inlineCode",{parentName:"p"},"SELECT")," query based on specific conditions. The ",(0,a.kt)("inlineCode",{parentName:"p"},"WHERE")," clause can be used with various operators and functions to create complex filtering conditions."),(0,a.kt)("p",null,"Here are some examples based on the provided Rust test code and SQL queries:"),(0,a.kt)("h2",{id:"comparison-operators"},"Comparison Operators"),(0,a.kt)("p",null,"You can use comparison operators such as ",(0,a.kt)("inlineCode",{parentName:"p"},"="),", ",(0,a.kt)("inlineCode",{parentName:"p"},"<>"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"<"),", ",(0,a.kt)("inlineCode",{parentName:"p"},">"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"<="),", and ",(0,a.kt)("inlineCode",{parentName:"p"},">=")," to compare values in the ",(0,a.kt)("inlineCode",{parentName:"p"},"WHERE")," clause."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT name FROM Boss WHERE id <= 2;\nSELECT name FROM Boss WHERE +id <= 2;\n")),(0,a.kt)("h2",{id:"between-operator"},"BETWEEN Operator"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"BETWEEN")," operator allows you to filter results within a specific range."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT id, name FROM Boss WHERE id BETWEEN 2 AND 4;\nSELECT id, name FROM Boss WHERE name BETWEEN 'Doll' AND 'Gehrman';\n")),(0,a.kt)("p",null,"To exclude the specified range, use the ",(0,a.kt)("inlineCode",{parentName:"p"},"NOT BETWEEN")," operator."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT name FROM Boss WHERE name NOT BETWEEN 'Doll' AND 'Gehrman';\n")),(0,a.kt)("h2",{id:"exists-and-not-exists"},"EXISTS and NOT EXISTS"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"EXISTS")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"NOT EXISTS")," operators are used to filter results based on the existence of records in a subquery."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT name\nFROM Boss\nWHERE EXISTS (\n    SELECT * FROM Hunter WHERE Hunter.name = Boss.name\n);\n\nSELECT name\nFROM Boss\nWHERE NOT EXISTS (\n    SELECT * FROM Hunter WHERE Hunter.name = Boss.name\n);\n")),(0,a.kt)("h2",{id:"in-operator"},"IN Operator"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"IN")," operator allows you to filter results based on a list of values or a subquery."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM Player WHERE id IN (SELECT user_id FROM Request WHERE quantity IN (6, 7, 8, 9));\n")),(0,a.kt)("h2",{id:"like-and-ilike-operators"},"LIKE and ILIKE Operators"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"LIKE")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"ILIKE")," operators are used to filter results based on pattern matching. Use the ",(0,a.kt)("inlineCode",{parentName:"p"},"%")," wildcard to match any number of characters and the ",(0,a.kt)("inlineCode",{parentName:"p"},"_")," wildcard to match a single character."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT name FROM Item WHERE name LIKE '_a%';\nSELECT name FROM Item WHERE name LIKE '%r%';\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"ILIKE")," is a case-insensitive version of ",(0,a.kt)("inlineCode",{parentName:"p"},"LIKE"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT name FROM Item WHERE name ILIKE '%%';\nSELECT name FROM Item WHERE name NOT ILIKE '%A%';\n")))}E.isMDXComponent=!0}}]);