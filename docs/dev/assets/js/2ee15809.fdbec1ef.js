"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6668],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=c(n),m=r,h=d["".concat(l,".").concat(m)]||d[m]||p[m]||i;return n?a.createElement(h,o(o({ref:t},u),{},{components:n})):a.createElement(h,o({ref:t},u))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:r,o[1]=s;for(var c=2;c<i;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4877:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const i={sidebar_position:3},o="Inserting Data",s={unversionedId:"ast-builder/inserting-data",id:"ast-builder/inserting-data",title:"Inserting Data",description:"In this section, we will discuss how to insert data into a table using GlueSQL.",source:"@site/docs/ast-builder/inserting-data.md",sourceDirName:"ast-builder",slug:"/ast-builder/inserting-data",permalink:"/docs/dev/docs/ast-builder/inserting-data",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"astBuilderSidebar",previous:{title:"Creating Derived Subqueries",permalink:"/docs/dev/docs/ast-builder/querying-data/creating-derived-subqueries"},next:{title:"Updating Data",permalink:"/docs/dev/docs/ast-builder/updating-data"}},l={},c=[{value:"Basic Insert",id:"basic-insert",level:2},{value:"Insert with Specified Columns",id:"insert-with-specified-columns",level:2},{value:"Insert from Source",id:"insert-from-source",level:2}],u={toc:c},d="wrapper";function p(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"inserting-data"},"Inserting Data"),(0,r.kt)("p",null,"In this section, we will discuss how to insert data into a table using GlueSQL."),(0,r.kt)("h2",{id:"basic-insert"},"Basic Insert"),(0,r.kt)("p",null,"To insert data into a table, you can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"insert")," method on a table object. You can then use the ",(0,r.kt)("inlineCode",{parentName:"p"},"values")," method to provide the values you want to insert."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'let actual = table("Foo")\n    .insert()\n    .values(vec!["1, \'Fruit\', 0.1", "2, \'Meat\', 0.8"])\n    .execute(glue)\n    .await;\nlet expected = Ok(Payload::Insert(2));\ntest(actual, expected);\n')),(0,r.kt)("p",null,"This code inserts two rows into the table ",(0,r.kt)("inlineCode",{parentName:"p"},"Foo"),". The first row has the values ",(0,r.kt)("inlineCode",{parentName:"p"},"1, 'Fruit', 0.1")," and the second row has the values ",(0,r.kt)("inlineCode",{parentName:"p"},"2, 'Meat', 0.8"),"."),(0,r.kt)("h2",{id:"insert-with-specified-columns"},"Insert with Specified Columns"),(0,r.kt)("p",null,"If you want to specify the columns to insert data into, you can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"columns")," method followed by the ",(0,r.kt)("inlineCode",{parentName:"p"},"values")," method. The ",(0,r.kt)("inlineCode",{parentName:"p"},"values")," method should contain the data for the specified columns."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'let actual = table("Foo")\n    .insert()\n    .columns("id, name")\n    .values(vec![vec![num(3), text("Drink")]])\n    .execute(glue)\n    .await;\nlet expected = Ok(Payload::Insert(1));\ntest(actual, expected);\n')),(0,r.kt)("p",null,"This code inserts a new row into the table ",(0,r.kt)("inlineCode",{parentName:"p"},"Foo")," with the specified columns ",(0,r.kt)("inlineCode",{parentName:"p"},"id")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"name"),". The ",(0,r.kt)("inlineCode",{parentName:"p"},"rate")," column is not specified, so it will be set to its default value."),(0,r.kt)("h2",{id:"insert-from-source"},"Insert from Source"),(0,r.kt)("p",null,"You can also insert data into a table using a ",(0,r.kt)("inlineCode",{parentName:"p"},"SELECT")," statement as the source. To do this, use the ",(0,r.kt)("inlineCode",{parentName:"p"},"as_select")," method followed by the ",(0,r.kt)("inlineCode",{parentName:"p"},"execute")," method."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'let actual = table("Bar")\n    .insert()\n    .as_select(table("Foo").select().project("id, name"))\n    .execute(glue)\n    .await;\nlet expected = Ok(Payload::Insert(3));\ntest(actual, expected);\n')),(0,r.kt)("p",null,"This code inserts data into the table ",(0,r.kt)("inlineCode",{parentName:"p"},"Bar")," using the ",(0,r.kt)("inlineCode",{parentName:"p"},"SELECT")," statement on the table ",(0,r.kt)("inlineCode",{parentName:"p"},"Foo"),". The ",(0,r.kt)("inlineCode",{parentName:"p"},"project")," method is used to specify the columns ",(0,r.kt)("inlineCode",{parentName:"p"},"id")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"name")," as the source data."))}p.isMDXComponent=!0}}]);