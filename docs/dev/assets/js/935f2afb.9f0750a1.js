"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[53],{1109:t=>{t.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"Create a Page","href":"/docs/dev/docs/tutorial-basics/create-a-page","docId":"tutorial-basics/create-a-page"},{"type":"link","label":"Create a Document","href":"/docs/dev/docs/tutorial-basics/create-a-document","docId":"tutorial-basics/create-a-document"},{"type":"link","label":"Create a Blog Post","href":"/docs/dev/docs/tutorial-basics/create-a-blog-post","docId":"tutorial-basics/create-a-blog-post"},{"type":"link","label":"Markdown Features","href":"/docs/dev/docs/tutorial-basics/markdown-features","docId":"tutorial-basics/markdown-features"},{"type":"link","label":"Deploy your site","href":"/docs/dev/docs/tutorial-basics/deploy-your-site","docId":"tutorial-basics/deploy-your-site"},{"type":"link","label":"Congratulations!","href":"/docs/dev/docs/tutorial-basics/congratulations","docId":"tutorial-basics/congratulations"}],"gettingStartedSidebar":[{"type":"link","label":"Rust","href":"/docs/dev/docs/getting-started/rust","docId":"getting-started/rust"},{"type":"link","label":"JavaScript (Web Browser)","href":"/docs/dev/docs/getting-started/javascript-web","docId":"getting-started/javascript-web"},{"type":"link","label":"Node.js","href":"/docs/dev/docs/getting-started/nodejs","docId":"getting-started/nodejs"},{"type":"link","label":"Command-Line Interface","href":"/docs/dev/docs/getting-started/cli","docId":"getting-started/cli"}],"sqlSyntaxSidebar":[{"type":"link","label":"Introduction","href":"/docs/dev/docs/sql-syntax/intro","docId":"sql-syntax/intro"},{"type":"category","label":"Statements","collapsible":true,"collapsed":false,"items":[{"type":"category","label":"Querying","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"WHERE","href":"/docs/dev/docs/sql-syntax/statements/querying/where","docId":"sql-syntax/statements/querying/where"},{"type":"link","label":"JOIN","href":"/docs/dev/docs/sql-syntax/statements/querying/join","docId":"sql-syntax/statements/querying/join"},{"type":"link","label":"LIMIT & OFFSET","href":"/docs/dev/docs/sql-syntax/statements/querying/limit","docId":"sql-syntax/statements/querying/limit"},{"type":"link","label":"Aggregation","href":"/docs/dev/docs/sql-syntax/statements/querying/aggregation","docId":"sql-syntax/statements/querying/aggregation"},{"type":"link","label":"Schemaless Data","href":"/docs/dev/docs/sql-syntax/statements/querying/schemaless","docId":"sql-syntax/statements/querying/schemaless"}]},{"type":"category","label":"Data definition","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"CREATE TABLE","href":"/docs/dev/docs/sql-syntax/statements/data-definition/create-table","docId":"sql-syntax/statements/data-definition/create-table"},{"type":"link","label":"DROP TABLE","href":"/docs/dev/docs/sql-syntax/statements/data-definition/drop-table","docId":"sql-syntax/statements/data-definition/drop-table"},{"type":"link","label":"CREATE INDEX","href":"/docs/dev/docs/sql-syntax/statements/data-definition/create-index","docId":"sql-syntax/statements/data-definition/create-index"},{"type":"link","label":"DROP INDEX","href":"/docs/dev/docs/sql-syntax/statements/data-definition/drop-index","docId":"sql-syntax/statements/data-definition/drop-index"},{"type":"link","label":"ALTER TABLE","href":"/docs/dev/docs/sql-syntax/statements/data-definition/alter-table","docId":"sql-syntax/statements/data-definition/alter-table"}]},{"type":"category","label":"Data manipulation","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"INSERT","href":"/docs/dev/docs/sql-syntax/statements/data-manipulation/insert","docId":"sql-syntax/statements/data-manipulation/insert"},{"type":"link","label":"UPDATE","href":"/docs/dev/docs/sql-syntax/statements/data-manipulation/update","docId":"sql-syntax/statements/data-manipulation/update"},{"type":"link","label":"DELETE","href":"/docs/dev/docs/sql-syntax/statements/data-manipulation/delete","docId":"sql-syntax/statements/data-manipulation/delete"}]},{"type":"link","label":"Transaction","href":"/docs/dev/docs/sql-syntax/statements/transaction","docId":"sql-syntax/statements/transaction"},{"type":"category","label":"Metadata","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"SHOW TABLES","href":"/docs/dev/docs/sql-syntax/statements/metadata/show-tables","docId":"sql-syntax/statements/metadata/show-tables"},{"type":"link","label":"Data Dictionary","href":"/docs/dev/docs/sql-syntax/statements/metadata/data-dictionary","docId":"sql-syntax/statements/metadata/data-dictionary"}]}]},{"type":"category","label":"Data types","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"BOOLEAN","href":"/docs/dev/docs/sql-syntax/data-types/boolean","docId":"sql-syntax/data-types/boolean"},{"type":"link","label":"Integer Types","href":"/docs/dev/docs/sql-syntax/data-types/integers","docId":"sql-syntax/data-types/integers"},{"type":"link","label":"FLOAT","href":"/docs/dev/docs/sql-syntax/data-types/float","docId":"sql-syntax/data-types/float"},{"type":"link","label":"TEXT","href":"/docs/dev/docs/sql-syntax/data-types/text","docId":"sql-syntax/data-types/text"},{"type":"link","label":"DECIMAL","href":"/docs/dev/docs/sql-syntax/data-types/decimal","docId":"sql-syntax/data-types/decimal"},{"type":"link","label":"DATE","href":"/docs/dev/docs/sql-syntax/data-types/date","docId":"sql-syntax/data-types/date"},{"type":"link","label":"TIMESTAMP","href":"/docs/dev/docs/sql-syntax/data-types/timestamp","docId":"sql-syntax/data-types/timestamp"},{"type":"link","label":"TIME","href":"/docs/dev/docs/sql-syntax/data-types/time","docId":"sql-syntax/data-types/time"},{"type":"link","label":"INTERVAL","href":"/docs/dev/docs/sql-syntax/data-types/interval","docId":"sql-syntax/data-types/interval"},{"type":"link","label":"LIST","href":"/docs/dev/docs/sql-syntax/data-types/list","docId":"sql-syntax/data-types/list"},{"type":"link","label":"MAP","href":"/docs/dev/docs/sql-syntax/data-types/map","docId":"sql-syntax/data-types/map"},{"type":"link","label":"BYTEA","href":"/docs/dev/docs/sql-syntax/data-types/bytea","docId":"sql-syntax/data-types/bytea"},{"type":"link","label":"INET","href":"/docs/dev/docs/sql-syntax/data-types/inet","docId":"sql-syntax/data-types/inet"},{"type":"link","label":"UUID","href":"/docs/dev/docs/sql-syntax/data-types/uuid","docId":"sql-syntax/data-types/uuid"}]},{"type":"category","label":"Functions","collapsible":true,"collapsed":false,"items":[{"type":"category","label":"Text","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"ASCII","href":"/docs/dev/docs/sql-syntax/functions/text/ascii","docId":"sql-syntax/functions/text/ascii"},{"type":"link","label":"CHR","href":"/docs/dev/docs/sql-syntax/functions/text/chr","docId":"sql-syntax/functions/text/chr"},{"type":"link","label":"CONCAT_WS","href":"/docs/dev/docs/sql-syntax/functions/text/concat-ws","docId":"sql-syntax/functions/text/concat-ws"},{"type":"link","label":"CONCAT","href":"/docs/dev/docs/sql-syntax/functions/text/concat","docId":"sql-syntax/functions/text/concat"},{"type":"link","label":"FIND_IDX","href":"/docs/dev/docs/sql-syntax/functions/text/find-idx","docId":"sql-syntax/functions/text/find-idx"},{"type":"link","label":"INITCAP","href":"/docs/dev/docs/sql-syntax/functions/text/initcap","docId":"sql-syntax/functions/text/initcap"},{"type":"link","label":"LEFT","href":"/docs/dev/docs/sql-syntax/functions/text/left","docId":"sql-syntax/functions/text/left"},{"type":"link","label":"LOWER","href":"/docs/dev/docs/sql-syntax/functions/text/lower","docId":"sql-syntax/functions/text/lower"},{"type":"link","label":"LPAD","href":"/docs/dev/docs/sql-syntax/functions/text/lpad","docId":"sql-syntax/functions/text/lpad"},{"type":"link","label":"LTRIM","href":"/docs/dev/docs/sql-syntax/functions/text/ltrim","docId":"sql-syntax/functions/text/ltrim"},{"type":"link","label":"POSITION","href":"/docs/dev/docs/sql-syntax/functions/text/position","docId":"sql-syntax/functions/text/position"},{"type":"link","label":"REPEAT","href":"/docs/dev/docs/sql-syntax/functions/text/repeat","docId":"sql-syntax/functions/text/repeat"},{"type":"link","label":"REVERSE","href":"/docs/dev/docs/sql-syntax/functions/text/reverse","docId":"sql-syntax/functions/text/reverse"},{"type":"link","label":"RIGHT","href":"/docs/dev/docs/sql-syntax/functions/text/right","docId":"sql-syntax/functions/text/right"},{"type":"link","label":"RPAD","href":"/docs/dev/docs/sql-syntax/functions/text/rpad","docId":"sql-syntax/functions/text/rpad"},{"type":"link","label":"RTRIM","href":"/docs/dev/docs/sql-syntax/functions/text/rtrim","docId":"sql-syntax/functions/text/rtrim"},{"type":"link","label":"SUBSTR","href":"/docs/dev/docs/sql-syntax/functions/text/substr","docId":"sql-syntax/functions/text/substr"},{"type":"link","label":"TRIM","href":"/docs/dev/docs/sql-syntax/functions/text/trim","docId":"sql-syntax/functions/text/trim"},{"type":"link","label":"UPPER","href":"/docs/dev/docs/sql-syntax/functions/text/upper","docId":"sql-syntax/functions/text/upper"}]},{"type":"category","label":"Math","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"ABS","href":"/docs/dev/docs/sql-syntax/functions/math/abs","docId":"sql-syntax/functions/math/abs"},{"type":"link","label":"ACOS","href":"/docs/dev/docs/sql-syntax/functions/math/acos","docId":"sql-syntax/functions/math/acos"},{"type":"link","label":"ASIN","href":"/docs/dev/docs/sql-syntax/functions/math/asin","docId":"sql-syntax/functions/math/asin"},{"type":"link","label":"ATAN","href":"/docs/dev/docs/sql-syntax/functions/math/atan","docId":"sql-syntax/functions/math/atan"},{"type":"link","label":"CEIL","href":"/docs/dev/docs/sql-syntax/functions/math/ceil","docId":"sql-syntax/functions/math/ceil"},{"type":"link","label":"COS","href":"/docs/dev/docs/sql-syntax/functions/math/cos","docId":"sql-syntax/functions/math/cos"},{"type":"link","label":"DEGREES","href":"/docs/dev/docs/sql-syntax/functions/math/degrees","docId":"sql-syntax/functions/math/degrees"},{"type":"link","label":"DIV","href":"/docs/dev/docs/sql-syntax/functions/math/div","docId":"sql-syntax/functions/math/div"},{"type":"link","label":"EXP","href":"/docs/dev/docs/sql-syntax/functions/math/exp","docId":"sql-syntax/functions/math/exp"},{"type":"link","label":"FLOOR","href":"/docs/dev/docs/sql-syntax/functions/math/floor","docId":"sql-syntax/functions/math/floor"},{"type":"link","label":"GCD","href":"/docs/dev/docs/sql-syntax/functions/math/gcd","docId":"sql-syntax/functions/math/gcd"},{"type":"link","label":"LCM","href":"/docs/dev/docs/sql-syntax/functions/math/lcm","docId":"sql-syntax/functions/math/lcm"},{"type":"link","label":"LN","href":"/docs/dev/docs/sql-syntax/functions/math/ln","docId":"sql-syntax/functions/math/ln"},{"type":"link","label":"LOG","href":"/docs/dev/docs/sql-syntax/functions/math/log","docId":"sql-syntax/functions/math/log"},{"type":"link","label":"LOG10","href":"/docs/dev/docs/sql-syntax/functions/math/log10","docId":"sql-syntax/functions/math/log10"},{"type":"link","label":"LOG2","href":"/docs/dev/docs/sql-syntax/functions/math/log2","docId":"sql-syntax/functions/math/log2"},{"type":"link","label":"MOD","href":"/docs/dev/docs/sql-syntax/functions/math/mod","docId":"sql-syntax/functions/math/mod"},{"type":"link","label":"PI","href":"/docs/dev/docs/sql-syntax/functions/math/pi","docId":"sql-syntax/functions/math/pi"},{"type":"link","label":"POWER","href":"/docs/dev/docs/sql-syntax/functions/math/power","docId":"sql-syntax/functions/math/power"},{"type":"link","label":"RADIANS","href":"/docs/dev/docs/sql-syntax/functions/math/radians","docId":"sql-syntax/functions/math/radians"},{"type":"link","label":"RAND","href":"/docs/dev/docs/sql-syntax/functions/math/rand","docId":"sql-syntax/functions/math/rand"},{"type":"link","label":"ROUND","href":"/docs/dev/docs/sql-syntax/functions/math/round","docId":"sql-syntax/functions/math/round"},{"type":"link","label":"SIGN","href":"/docs/dev/docs/sql-syntax/functions/math/sign","docId":"sql-syntax/functions/math/sign"},{"type":"link","label":"SIN","href":"/docs/dev/docs/sql-syntax/functions/math/sin","docId":"sql-syntax/functions/math/sin"},{"type":"link","label":"SQRT","href":"/docs/dev/docs/sql-syntax/functions/math/sqrt","docId":"sql-syntax/functions/math/sqrt"},{"type":"link","label":"TAN","href":"/docs/dev/docs/sql-syntax/functions/math/tan","docId":"sql-syntax/functions/math/tan"}]},{"type":"category","label":"Date & Time","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"EXTRACT","href":"/docs/dev/docs/sql-syntax/functions/datetime/extract","docId":"sql-syntax/functions/datetime/extract"},{"type":"link","label":"FORMAT","href":"/docs/dev/docs/sql-syntax/functions/datetime/format","docId":"sql-syntax/functions/datetime/format"},{"type":"link","label":"NOW","href":"/docs/dev/docs/sql-syntax/functions/datetime/now","docId":"sql-syntax/functions/datetime/now"},{"type":"link","label":"TO_DATE","href":"/docs/dev/docs/sql-syntax/functions/datetime/to-date","docId":"sql-syntax/functions/datetime/to-date"},{"type":"link","label":"TO_TIME","href":"/docs/dev/docs/sql-syntax/functions/datetime/to-time","docId":"sql-syntax/functions/datetime/to-time"},{"type":"link","label":"TO_TIMESTAMP","href":"/docs/dev/docs/sql-syntax/functions/datetime/to-timestamp","docId":"sql-syntax/functions/datetime/to-timestamp"}]},{"type":"category","label":"List & Map","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"APPEND","href":"/docs/dev/docs/sql-syntax/functions/list-map/append","docId":"sql-syntax/functions/list-map/append"},{"type":"link","label":"CONCAT","href":"/docs/dev/docs/sql-syntax/functions/list-map/concat","docId":"sql-syntax/functions/list-map/concat"},{"type":"link","label":"PREPEND","href":"/docs/dev/docs/sql-syntax/functions/list-map/prepend","docId":"sql-syntax/functions/list-map/prepend"}]},{"type":"category","label":"Geometry","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"CALC_DISTANCE","href":"/docs/dev/docs/sql-syntax/functions/geometry/calc-distance","docId":"sql-syntax/functions/geometry/calc-distance"},{"type":"link","label":"GET_X","href":"/docs/dev/docs/sql-syntax/functions/geometry/get-x","docId":"sql-syntax/functions/geometry/get-x"},{"type":"link","label":"GET_Y","href":"/docs/dev/docs/sql-syntax/functions/geometry/get-y","docId":"sql-syntax/functions/geometry/get-y"},{"type":"link","label":"POINT","href":"/docs/dev/docs/sql-syntax/functions/geometry/point","docId":"sql-syntax/functions/geometry/point"}]},{"type":"category","label":"Others","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"CAST","href":"/docs/dev/docs/sql-syntax/functions/others/cast","docId":"sql-syntax/functions/others/cast"},{"type":"link","label":"GENERATE_UUID","href":"/docs/dev/docs/sql-syntax/functions/others/generate-uuid","docId":"sql-syntax/functions/others/generate-uuid"},{"type":"link","label":"IFNULL","href":"/docs/dev/docs/sql-syntax/functions/others/ifnull","docId":"sql-syntax/functions/others/ifnull"}]}]}],"astBuilderSidebar":[{"type":"link","label":"Introduction","href":"/docs/dev/docs/ast-builder/intro","docId":"ast-builder/intro"},{"type":"category","label":"Statements","collapsible":true,"collapsed":true,"items":[{"type":"category","label":"Querying","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Fetching Data from Storage","href":"/docs/dev/docs/ast-builder/statements/querying/fetching-data-from-storage","docId":"ast-builder/statements/querying/fetching-data-from-storage"},{"type":"link","label":"Using Preloaded Data","href":"/docs/dev/docs/ast-builder/statements/querying/using-preloaded-data","docId":"ast-builder/statements/querying/using-preloaded-data"},{"type":"link","label":"Creating Derived Subqueries","href":"/docs/dev/docs/ast-builder/statements/querying/creating-derived-subqueries","docId":"ast-builder/statements/querying/creating-derived-subqueries"},{"type":"link","label":"Data Aggregation","href":"/docs/dev/docs/ast-builder/statements/querying/data-aggregation","docId":"ast-builder/statements/querying/data-aggregation"},{"type":"link","label":"Data Injection","href":"/docs/dev/docs/ast-builder/statements/querying/data-injection","docId":"ast-builder/statements/querying/data-injection"},{"type":"link","label":"Data Joining","href":"/docs/dev/docs/ast-builder/statements/querying/data-joining","docId":"ast-builder/statements/querying/data-joining"},{"type":"link","label":"Data Selection and Projection","href":"/docs/dev/docs/ast-builder/statements/querying/data-selection-and-projection","docId":"ast-builder/statements/querying/data-selection-and-projection"},{"type":"link","label":"Data Sorting and Limiting","href":"/docs/dev/docs/ast-builder/statements/querying/data-sorting-and-limiting","docId":"ast-builder/statements/querying/data-sorting-and-limiting"}]},{"type":"category","label":"Data Manipulation","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Inserting Data","href":"/docs/dev/docs/ast-builder/statements/data-manipulation/inserting-data","docId":"ast-builder/statements/data-manipulation/inserting-data"},{"type":"link","label":"Updating Data","href":"/docs/dev/docs/ast-builder/statements/data-manipulation/updating-data","docId":"ast-builder/statements/data-manipulation/updating-data"},{"type":"link","label":"Deleting Data","href":"/docs/dev/docs/ast-builder/statements/data-manipulation/deleting-data","docId":"ast-builder/statements/data-manipulation/deleting-data"}]}]},{"type":"category","label":"Expressions","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Conditional","href":"/docs/dev/docs/ast-builder/expressions/conditional","docId":"ast-builder/expressions/conditional"},{"type":"link","label":"Nested","href":"/docs/dev/docs/ast-builder/expressions/nested","docId":"ast-builder/expressions/nested"},{"type":"link","label":"Operator Based","href":"/docs/dev/docs/ast-builder/expressions/operator-based","docId":"ast-builder/expressions/operator-based"},{"type":"link","label":"Pattern Matching","href":"/docs/dev/docs/ast-builder/expressions/pattern-matching","docId":"ast-builder/expressions/pattern-matching"},{"type":"link","label":"Value Checking","href":"/docs/dev/docs/ast-builder/expressions/value-checking","docId":"ast-builder/expressions/value-checking"}]},{"type":"category","label":"Functions","collapsible":true,"collapsed":true,"items":[{"type":"category","label":"Text","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Case Conversion","href":"/docs/dev/docs/ast-builder/functions/text/case-conversion","docId":"ast-builder/functions/text/case-conversion"},{"type":"link","label":"Character Conversion","href":"/docs/dev/docs/ast-builder/functions/text/character-conversion","docId":"ast-builder/functions/text/character-conversion"},{"type":"link","label":"Padding","href":"/docs/dev/docs/ast-builder/functions/text/padding","docId":"ast-builder/functions/text/padding"},{"type":"link","label":"Position and Indexing","href":"/docs/dev/docs/ast-builder/functions/text/position-and-indexing","docId":"ast-builder/functions/text/position-and-indexing"},{"type":"link","label":"Text Manipulation","href":"/docs/dev/docs/ast-builder/functions/text/text-manipulation","docId":"ast-builder/functions/text/text-manipulation"},{"type":"link","label":"Trimming","href":"/docs/dev/docs/ast-builder/functions/text/trimming","docId":"ast-builder/functions/text/trimming"}]},{"type":"category","label":"Math","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Basic Arithmetic","href":"/docs/dev/docs/ast-builder/functions/math/basic-arithmetic","docId":"ast-builder/functions/math/basic-arithmetic"},{"type":"link","label":"Conversion","href":"/docs/dev/docs/ast-builder/functions/math/conversion","docId":"ast-builder/functions/math/conversion"},{"type":"link","label":"Logarithmic and Exponential","href":"/docs/dev/docs/ast-builder/functions/math/logarithmic-and-exponential","docId":"ast-builder/functions/math/logarithmic-and-exponential"},{"type":"link","label":"Rounding","href":"/docs/dev/docs/ast-builder/functions/math/rounding","docId":"ast-builder/functions/math/rounding"},{"type":"link","label":"Special Mathematical","href":"/docs/dev/docs/ast-builder/functions/math/special-mathematical","docId":"ast-builder/functions/math/special-mathematical"},{"type":"link","label":"Trigonometric","href":"/docs/dev/docs/ast-builder/functions/math/trigonometric","docId":"ast-builder/functions/math/trigonometric"}]},{"type":"category","label":"Date & Time","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Conversion","href":"/docs/dev/docs/ast-builder/functions/date-&-time/conversion","docId":"ast-builder/functions/date-&-time/conversion"},{"type":"link","label":"Current Date and Time","href":"/docs/dev/docs/ast-builder/functions/date-&-time/current-date-and-time","docId":"ast-builder/functions/date-&-time/current-date-and-time"},{"type":"link","label":"Date and Time Extraction","href":"/docs/dev/docs/ast-builder/functions/date-&-time/date-and-time-extraction","docId":"ast-builder/functions/date-&-time/date-and-time-extraction"},{"type":"link","label":"Formatting","href":"/docs/dev/docs/ast-builder/functions/date-&-time/formatting","docId":"ast-builder/functions/date-&-time/formatting"}]},{"type":"category","label":"List & Map","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"List and Map Concatenation","href":"/docs/dev/docs/ast-builder/functions/list-&-map/list-and-map-concatenation","docId":"ast-builder/functions/list-&-map/list-and-map-concatenation"},{"type":"link","label":"List Manipulation","href":"/docs/dev/docs/ast-builder/functions/list-&-map/list-manipulation","docId":"ast-builder/functions/list-&-map/list-manipulation"}]},{"type":"category","label":"Geometry","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Coordinate Extraction","href":"/docs/dev/docs/ast-builder/functions/geometry/coordinate-extraction","docId":"ast-builder/functions/geometry/coordinate-extraction"},{"type":"link","label":"Distance Calculation","href":"/docs/dev/docs/ast-builder/functions/geometry/distance-calculation","docId":"ast-builder/functions/geometry/distance-calculation"},{"type":"link","label":"Point Creation","href":"/docs/dev/docs/ast-builder/functions/geometry/point-creation","docId":"ast-builder/functions/geometry/point-creation"}]},{"type":"category","label":"Others","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Null Handling","href":"/docs/dev/docs/ast-builder/functions/others/null-handling","docId":"ast-builder/functions/others/null-handling"},{"type":"link","label":"Type Conversion","href":"/docs/dev/docs/ast-builder/functions/others/type-conversion","docId":"ast-builder/functions/others/type-conversion"},{"type":"link","label":"Unique Identifier","href":"/docs/dev/docs/ast-builder/functions/others/unique-identifier","docId":"ast-builder/functions/others/unique-identifier"}]}]}],"customStorageSidebar":[{"type":"link","label":"Introduction","href":"/docs/dev/docs/storages/intro","docId":"storages/intro"},{"type":"category","label":"Supported Storages","collapsible":true,"collapsed":false,"items":[{"type":"link","label":"Memory Storage","href":"/docs/dev/docs/storages/supported-storages/memory-storage","docId":"storages/supported-storages/memory-storage"},{"type":"link","label":"Shared Memory Storage","href":"/docs/dev/docs/storages/supported-storages/shared-memory-storage","docId":"storages/supported-storages/shared-memory-storage"},{"type":"link","label":"Sled Storage","href":"/docs/dev/docs/storages/supported-storages/sled-storage","docId":"storages/supported-storages/sled-storage"},{"type":"link","label":"JSON Storage","href":"/docs/dev/docs/storages/supported-storages/json-storage","docId":"storages/supported-storages/json-storage"},{"type":"link","label":"WebStorage (local & session)","href":"/docs/dev/docs/storages/supported-storages/web-storage","docId":"storages/supported-storages/web-storage"},{"type":"link","label":"IndexedDB Storage","href":"/docs/dev/docs/storages/supported-storages/idb-storage","docId":"storages/supported-storages/idb-storage"},{"type":"link","label":"Composite Storage","href":"/docs/dev/docs/storages/supported-storages/composite-storage","docId":"storages/supported-storages/composite-storage"}]},{"type":"category","label":"Developing Custom Storages","collapsible":true,"collapsed":false,"items":[{"type":"link","label":"Introduction","href":"/docs/dev/docs/storages/developing-custom-storages/intro","docId":"storages/developing-custom-storages/intro"},{"type":"category","label":"Understanding Store traits","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Store","href":"/docs/dev/docs/storages/developing-custom-storages/store-traits/store","docId":"storages/developing-custom-storages/store-traits/store"},{"type":"link","label":"StoreMut","href":"/docs/dev/docs/storages/developing-custom-storages/store-traits/store-mut","docId":"storages/developing-custom-storages/store-traits/store-mut"},{"type":"link","label":"AlterTable","href":"/docs/dev/docs/storages/developing-custom-storages/store-traits/alter-table","docId":"storages/developing-custom-storages/store-traits/alter-table"},{"type":"link","label":"Transaction","href":"/docs/dev/docs/storages/developing-custom-storages/store-traits/transaction","docId":"storages/developing-custom-storages/store-traits/transaction"},{"type":"link","label":"CustomFunction","href":"/docs/dev/docs/storages/developing-custom-storages/store-traits/custom-function","docId":"storages/developing-custom-storages/store-traits/custom-function"},{"type":"link","label":"CustomFunctionMut","href":"/docs/dev/docs/storages/developing-custom-storages/store-traits/custom-function-mut","docId":"storages/developing-custom-storages/store-traits/custom-function-mut"},{"type":"link","label":"Index","href":"/docs/dev/docs/storages/developing-custom-storages/store-traits/index-trait","docId":"storages/developing-custom-storages/store-traits/index-trait"},{"type":"link","label":"IndexMut","href":"/docs/dev/docs/storages/developing-custom-storages/store-traits/index-mut","docId":"storages/developing-custom-storages/store-traits/index-mut"},{"type":"link","label":"Metadata","href":"/docs/dev/docs/storages/developing-custom-storages/store-traits/metadata","docId":"storages/developing-custom-storages/store-traits/metadata"}]},{"type":"link","label":"Using the Test Suite","href":"/docs/dev/docs/storages/developing-custom-storages/using-test-suite","docId":"storages/developing-custom-storages/using-test-suite"}]}]},"docs":{"ast-builder/expressions/conditional":{"id":"ast-builder/expressions/conditional","title":"Conditional","description":"Todo","sidebar":"astBuilderSidebar"},"ast-builder/expressions/nested":{"id":"ast-builder/expressions/nested","title":"Nested","description":"Todo","sidebar":"astBuilderSidebar"},"ast-builder/expressions/operator-based":{"id":"ast-builder/expressions/operator-based","title":"Operator Based","description":"Todo","sidebar":"astBuilderSidebar"},"ast-builder/expressions/pattern-matching":{"id":"ast-builder/expressions/pattern-matching","title":"Pattern Matching","description":"Pattern matching is a crucial feature in SQL that allows you to match rows based on specific patterns in a column. GlueSQL provides 4 pattern matching operators: like, ilike, notlike, and notilike.","sidebar":"astBuilderSidebar"},"ast-builder/expressions/value-checking":{"id":"ast-builder/expressions/value-checking","title":"Value Checking","description":"Todo","sidebar":"astBuilderSidebar"},"ast-builder/functions/date-&-time/conversion":{"id":"ast-builder/functions/date-&-time/conversion","title":"Conversion","description":"GlueSQL provides date and time conversion functions that allow you to convert text data to datetime data types such as Date, Time, and Timestamp. These functions are todate, totime, and to_timestamp.","sidebar":"astBuilderSidebar"},"ast-builder/functions/date-&-time/current-date-and-time":{"id":"ast-builder/functions/date-&-time/current-date-and-time","title":"Current Date and Time","description":"GlueSQL provides a function to get the current date and time: now.","sidebar":"astBuilderSidebar"},"ast-builder/functions/date-&-time/date-and-time-extraction":{"id":"ast-builder/functions/date-&-time/date-and-time-extraction","title":"Date and Time Extraction","description":"Todo","sidebar":"astBuilderSidebar"},"ast-builder/functions/date-&-time/formatting":{"id":"ast-builder/functions/date-&-time/formatting","title":"Formatting","description":"In GlueSQL, you can format date, time, and timestamp values to a specific format using the format function.","sidebar":"astBuilderSidebar"},"ast-builder/functions/geometry/coordinate-extraction":{"id":"ast-builder/functions/geometry/coordinate-extraction","title":"Coordinate Extraction","description":"Todo","sidebar":"astBuilderSidebar"},"ast-builder/functions/geometry/distance-calculation":{"id":"ast-builder/functions/geometry/distance-calculation","title":"Distance Calculation","description":"Todo","sidebar":"astBuilderSidebar"},"ast-builder/functions/geometry/point-creation":{"id":"ast-builder/functions/geometry/point-creation","title":"Point Creation","description":"Todo","sidebar":"astBuilderSidebar"},"ast-builder/functions/list-&-map/list-and-map-concatenation":{"id":"ast-builder/functions/list-&-map/list-and-map-concatenation","title":"List and Map Concatenation","description":"Todo","sidebar":"astBuilderSidebar"},"ast-builder/functions/list-&-map/list-manipulation":{"id":"ast-builder/functions/list-&-map/list-manipulation","title":"List Manipulation","description":"Todo","sidebar":"astBuilderSidebar"},"ast-builder/functions/math/basic-arithmetic":{"id":"ast-builder/functions/math/basic-arithmetic","title":"Basic Arithmetic","description":"GlueSQL provides a number of basic arithmetic operations such as absolute value (abs), division (divide), modulo (modulo), greatest common divisor (gcd), and least common multiple (lcm).","sidebar":"astBuilderSidebar"},"ast-builder/functions/math/conversion":{"id":"ast-builder/functions/math/conversion","title":"Conversion","description":"The AST (Abstract Syntax Tree) Builder in GlueSQL provides mathematical conversion functions like degrees and radians. These functions convert angles expressed in radians to degrees and vice versa.","sidebar":"astBuilderSidebar"},"ast-builder/functions/math/logarithmic-and-exponential":{"id":"ast-builder/functions/math/logarithmic-and-exponential","title":"Logarithmic and Exponential","description":"Todo","sidebar":"astBuilderSidebar"},"ast-builder/functions/math/rounding":{"id":"ast-builder/functions/math/rounding","title":"Rounding","description":"The AST (Abstract Syntax Tree) Builder in GlueSQL provides several mathematical functions, including round, ceil, and floor. These functions are used to perform rounding operations on floating-point numbers.","sidebar":"astBuilderSidebar"},"ast-builder/functions/math/special-mathematical":{"id":"ast-builder/functions/math/special-mathematical","title":"Special Mathematical","description":"Todo","sidebar":"astBuilderSidebar"},"ast-builder/functions/math/trigonometric":{"id":"ast-builder/functions/math/trigonometric","title":"Trigonometric","description":"Todo","sidebar":"astBuilderSidebar"},"ast-builder/functions/others/null-handling":{"id":"ast-builder/functions/others/null-handling","title":"Null Handling","description":"In some cases, you may need to handle NULL values in your database. GlueSQL provides a function called ifnull to handle these cases.","sidebar":"astBuilderSidebar"},"ast-builder/functions/others/type-conversion":{"id":"ast-builder/functions/others/type-conversion","title":"Type Conversion","description":"Todo","sidebar":"astBuilderSidebar"},"ast-builder/functions/others/unique-identifier":{"id":"ast-builder/functions/others/unique-identifier","title":"Unique Identifier","description":"Todo","sidebar":"astBuilderSidebar"},"ast-builder/functions/text/case-conversion":{"id":"ast-builder/functions/text/case-conversion","title":"Case Conversion","description":"GlueSQL provides several text case conversion functions that allow you to convert text data to upper case, lower case or capitalize each word in a string.","sidebar":"astBuilderSidebar"},"ast-builder/functions/text/character-conversion":{"id":"ast-builder/functions/text/character-conversion","title":"Character Conversion","description":"Todo","sidebar":"astBuilderSidebar"},"ast-builder/functions/text/padding":{"id":"ast-builder/functions/text/padding","title":"Padding","description":"Todo","sidebar":"astBuilderSidebar"},"ast-builder/functions/text/position-and-indexing":{"id":"ast-builder/functions/text/position-and-indexing","title":"Position and Indexing","description":"GlueSQL provides several functions for text manipulation, including finding the index of a substring (find_idx), finding the position of a substring (position), and getting the leftmost or rightmost characters (left and right).","sidebar":"astBuilderSidebar"},"ast-builder/functions/text/text-manipulation":{"id":"ast-builder/functions/text/text-manipulation","title":"Text Manipulation","description":"Todo","sidebar":"astBuilderSidebar"},"ast-builder/functions/text/trimming":{"id":"ast-builder/functions/text/trimming","title":"Trimming","description":"GlueSQL provides several text trimming functions that allow you to remove leading or trailing characters from a text string.","sidebar":"astBuilderSidebar"},"ast-builder/intro":{"id":"ast-builder/intro","title":"Introduction","description":"GlueSQL offers two ways to create and execute queries: using SQL statements or using the AST Builder. In this introductory page, we will focus on the AST Builder.","sidebar":"astBuilderSidebar"},"ast-builder/statements/data-manipulation/deleting-data":{"id":"ast-builder/statements/data-manipulation/deleting-data","title":"Deleting Data","description":"In this section, we will discuss how to delete data from a table using GlueSQL.","sidebar":"astBuilderSidebar"},"ast-builder/statements/data-manipulation/inserting-data":{"id":"ast-builder/statements/data-manipulation/inserting-data","title":"Inserting Data","description":"In this section, we will discuss how to insert data into a table using GlueSQL.","sidebar":"astBuilderSidebar"},"ast-builder/statements/data-manipulation/updating-data":{"id":"ast-builder/statements/data-manipulation/updating-data","title":"Updating Data","description":"In this section, we will discuss how to update data in a table using GlueSQL.","sidebar":"astBuilderSidebar"},"ast-builder/statements/querying/creating-derived-subqueries":{"id":"ast-builder/statements/querying/creating-derived-subqueries","title":"Creating Derived Subqueries","description":"This document covers the aliasas functionality of the AST Builder in the GlueSQL project. The aliasas method allows you to create a derived subquery, which is similar to subqueries in SQL. It gives you the ability to use the output of a query as a table to perform further queries.","sidebar":"astBuilderSidebar"},"ast-builder/statements/querying/data-aggregation":{"id":"ast-builder/statements/querying/data-aggregation","title":"Data Aggregation","description":"Todo","sidebar":"astBuilderSidebar"},"ast-builder/statements/querying/data-injection":{"id":"ast-builder/statements/querying/data-injection","title":"Data Injection","description":"Todo","sidebar":"astBuilderSidebar"},"ast-builder/statements/querying/data-joining":{"id":"ast-builder/statements/querying/data-joining","title":"Data Joining","description":"Todo","sidebar":"astBuilderSidebar"},"ast-builder/statements/querying/data-selection-and-projection":{"id":"ast-builder/statements/querying/data-selection-and-projection","title":"Data Selection and Projection","description":"Todo","sidebar":"astBuilderSidebar"},"ast-builder/statements/querying/data-sorting-and-limiting":{"id":"ast-builder/statements/querying/data-sorting-and-limiting","title":"Data Sorting and Limiting","description":"Todo","sidebar":"astBuilderSidebar"},"ast-builder/statements/querying/fetching-data-from-storage":{"id":"ast-builder/statements/querying/fetching-data-from-storage","title":"Fetching Data from Storage","description":"The AST Builder provides a powerful and flexible way to query data from your tables, similar to SQL\'s SELECT statement. This guide will show you how to use the AST Builder\'s table(\\"foo\\").select() method to perform various query types, including filtering, joining, grouping, ordering, and pagination.","sidebar":"astBuilderSidebar"},"ast-builder/statements/querying/using-preloaded-data":{"id":"ast-builder/statements/querying/using-preloaded-data","title":"Using Preloaded Data","description":"This guide will show you how to use AST Builder to query data that has already been loaded into memory, as opposed to querying data from storage. This is similar to SQL\'s VALUES functionality.","sidebar":"astBuilderSidebar"},"getting-started/cli":{"id":"getting-started/cli","title":"Command-Line Interface","description":"","sidebar":"gettingStartedSidebar"},"getting-started/javascript-web":{"id":"getting-started/javascript-web","title":"JavaScript (Web Browser)","description":"GlueSQL is a SQL database engine written in Rust, compiled to WebAssembly, and can be used in JavaScript. This guide will walk you through the process of installing and using the GlueSQL package.","sidebar":"gettingStartedSidebar"},"getting-started/nodejs":{"id":"getting-started/nodejs","title":"Node.js","description":"This guide will help you get started with GlueSQL in a Node.js project. First, install the gluesql package using npm by running the following command in your terminal:","sidebar":"gettingStartedSidebar"},"getting-started/rust":{"id":"getting-started/rust","title":"Rust","description":"To install and use GlueSQL in your Rust project, you\'ll first need to add it as a dependency from crates.io. You can do this by adding the following lines to your Cargo.toml file:","sidebar":"gettingStartedSidebar"},"intro":{"id":"intro","title":"Tutorial Intro","description":"Let\'s discover Docusaurus in less than 5 minutes."},"sql-syntax/data-types/boolean":{"id":"sql-syntax/data-types/boolean","title":"BOOLEAN","description":"The BOOLEAN data type in SQL is used to store boolean values, which can be either TRUE or FALSE. This data type is useful for representing binary states or conditions in your data.","sidebar":"sqlSyntaxSidebar"},"sql-syntax/data-types/bytea":{"id":"sql-syntax/data-types/bytea","title":"BYTEA","description":"The BYTEA data type in SQL is used to store binary data, such as images, audio files, or any other type of data that needs to be stored in its raw form. In GlueSQL, the BYTEA data type is represented as a sequence of bytes.","sidebar":"sqlSyntaxSidebar"},"sql-syntax/data-types/date":{"id":"sql-syntax/data-types/date","title":"DATE","description":"In GlueSQL, the DATE data type is used to store date values in the format \'YYYY-MM-DD\'. Note that GlueSQL currently does not support timezones.","sidebar":"sqlSyntaxSidebar"},"sql-syntax/data-types/decimal":{"id":"sql-syntax/data-types/decimal","title":"DECIMAL","description":"The DECIMAL data type in SQL is used to store exact numeric values, making it suitable for financial calculations and other operations requiring a high level of precision without round-off errors. In GlueSQL, the DECIMAL data type is implemented using a pure Rust library, providing a 96-bit integer number, a scaling factor for specifying the decimal fraction, and a 1-bit sign.","sidebar":"sqlSyntaxSidebar"},"sql-syntax/data-types/float":{"id":"sql-syntax/data-types/float","title":"FLOAT","description":"The FLOAT data type in SQL is used to store floating-point numbers. In GlueSQL, the FLOAT data type represents a 64-bit floating-point number, providing the ability to store numbers with decimal values and a wide range of magnitude.","sidebar":"sqlSyntaxSidebar"},"sql-syntax/data-types/inet":{"id":"sql-syntax/data-types/inet","title":"INET","description":"The INET data type in SQL is used to store IPv4 and IPv6 addresses. These addresses can be compared, filtered, and sorted using standard SQL operations.","sidebar":"sqlSyntaxSidebar"},"sql-syntax/data-types/integers":{"id":"sql-syntax/data-types/integers","title":"Integer Types","description":"GlueSQL supports the following integer data types:","sidebar":"sqlSyntaxSidebar"},"sql-syntax/data-types/interval":{"id":"sql-syntax/data-types/interval","title":"INTERVAL","description":"The INTERVAL data type in GlueSQL is used to represent a period of time. In accordance with the ANSI SQL standard, several subtypes of INTERVAL can be used to represent different units of time, such as years, months, days, hours, minutes, and seconds. These subtypes are:","sidebar":"sqlSyntaxSidebar"},"sql-syntax/data-types/list":{"id":"sql-syntax/data-types/list","title":"LIST","description":"The LIST data type in GlueSQL is used to store ordered collections of elements, similar to JSON arrays. The elements can be any valid data supported by GlueSQL, such as numbers, strings, booleans, null, MAP, or even other nested LIST values. Although the input is provided in a JSON array format for convenience, it can store more than just JSON data.","sidebar":"sqlSyntaxSidebar"},"sql-syntax/data-types/map":{"id":"sql-syntax/data-types/map","title":"MAP","description":"The MAP data type in GlueSQL is used to store nested key-value pairs, similar to JSON objects. The object keys must be strings, and the values can be any valid data supported by GlueSQL, such as numbers, strings, booleans, null, or even other nested MAP values. Although the input is provided in a JSON object format for convenience, it can store more than just JSON data.","sidebar":"sqlSyntaxSidebar"},"sql-syntax/data-types/text":{"id":"sql-syntax/data-types/text","title":"TEXT","description":"The TEXT data type in SQL is used to store variable-length character strings. In GlueSQL, the TEXT data type is the only supported string data type, providing the ability to store and manage strings of varying lengths.","sidebar":"sqlSyntaxSidebar"},"sql-syntax/data-types/time":{"id":"sql-syntax/data-types/time","title":"TIME","description":"In GlueSQL, the TIME data type is used to store time values in the format \'HHSS.SSS\'. The code snippet provided demonstrates how to create a table with TIME columns, insert data into it, and perform various queries and operations on the data.","sidebar":"sqlSyntaxSidebar"},"sql-syntax/data-types/timestamp":{"id":"sql-syntax/data-types/timestamp","title":"TIMESTAMP","description":"In GlueSQL, the TIMESTAMP data type is used to store date and time values in the format \'YYYY-MM-DD HHSS.SSSS\'. Although timezone information can be included in the input string, GlueSQL stores all TIMESTAMP values in UTC, discarding the timezone information.","sidebar":"sqlSyntaxSidebar"},"sql-syntax/data-types/uuid":{"id":"sql-syntax/data-types/uuid","title":"UUID","description":"The UUID data type in SQL is used to store universally unique identifiers (UUIDs). These identifiers can be compared, filtered, and sorted using standard SQL operations.","sidebar":"sqlSyntaxSidebar"},"sql-syntax/functions/datetime/extract":{"id":"sql-syntax/functions/datetime/extract","title":"EXTRACT","description":"The EXTRACT function in SQL is used to retrieve a specific datetime field from a date, time, or interval.","sidebar":"sqlSyntaxSidebar"},"sql-syntax/functions/datetime/format":{"id":"sql-syntax/functions/datetime/format","title":"FORMAT","description":"The FORMAT function in SQL is used to format date, time, and timestamp values into a specified format.","sidebar":"sqlSyntaxSidebar"},"sql-syntax/functions/datetime/now":{"id":"sql-syntax/functions/datetime/now","title":"NOW","description":"The NOW() function in SQL returns the current date and time in UTC. You can use it to retrieve the current UTC timestamp, or as a default value for a TIMESTAMP column in a table.","sidebar":"sqlSyntaxSidebar"},"sql-syntax/functions/datetime/to-date":{"id":"sql-syntax/functions/datetime/to-date","title":"TO_DATE","description":"The TO_DATE function in SQL is used to convert a string into a DATE. This function takes two arguments, the string to be converted and a format string that specifies the format of the input string.","sidebar":"sqlSyntaxSidebar"},"sql-syntax/functions/datetime/to-time":{"id":"sql-syntax/functions/datetime/to-time","title":"TO_TIME","description":"The TO_TIME function in SQL is used to convert a string into a TIME. This function takes two arguments, the string to be converted and a format string that specifies the format of the input string.","sidebar":"sqlSyntaxSidebar"},"sql-syntax/functions/datetime/to-timestamp":{"id":"sql-syntax/functions/datetime/to-timestamp","title":"TO_TIMESTAMP","description":"The TO_TIMESTAMP function in SQL is used to convert a string into a TIMESTAMP. This function takes two arguments, the string to be converted and a format string that specifies the format of the input string.","sidebar":"sqlSyntaxSidebar"},"sql-syntax/functions/geometry/calc-distance":{"id":"sql-syntax/functions/geometry/calc-distance","title":"CALC_DISTANCE","description":"The CALC_DISTANCE function is used to calculate the Euclidean distance between two Point type geographical coordinates.","sidebar":"sqlSyntaxSidebar"},"sql-syntax/functions/geometry/get-x":{"id":"sql-syntax/functions/geometry/get-x","title":"GET_X","description":"The GET_X function returns the x-coordinate of a given POINT data type. It takes one POINT data type argument and returns a FLOAT value representing the x-coordinate.","sidebar":"sqlSyntaxSidebar"},"sql-syntax/functions/geometry/get-y":{"id":"sql-syntax/functions/geometry/get-y","title":"GET_Y","description":"The GET_Y function returns the y-coordinate of a given POINT data type. It takes one POINT data type argument and returns a FLOAT value representing the y-coordinate.","sidebar":"sqlSyntaxSidebar"},"sql-syntax/functions/geometry/point":{"id":"sql-syntax/functions/geometry/point","title":"POINT","description":"The POINT function creates a point value using the provided x and y coordinates. A point value represents a two-dimensional geometric point with a pair of floating-point numbers, often used for storing spatial data.","sidebar":"sqlSyntaxSidebar"},"sql-syntax/functions/list-map/append":{"id":"sql-syntax/functions/list-map/append","title":"APPEND","description":"The APPEND function in SQL is used to append an element to a list.","sidebar":"sqlSyntaxSidebar"},"sql-syntax/functions/list-map/concat":{"id":"sql-syntax/functions/list-map/concat","title":"CONCAT","description":"The CONCAT function is used to concatenate two or more list values together.","sidebar":"sqlSyntaxSidebar"},"sql-syntax/functions/list-map/prepend":{"id":"sql-syntax/functions/list-map/prepend","title":"PREPEND","description":"The PREPEND function in SQL is used to prepend an element to a list.","sidebar":"sqlSyntaxSidebar"},"sql-syntax/functions/math/abs":{"id":"sql-syntax/functions/math/abs","title":"ABS","description":"The ABS function is used to calculate the absolute value of a number. It takes a single numeric argument and returns the absolute value of that number. The argument can be an integer, decimal, or float value.","sidebar":"sqlSyntaxSidebar"},"sql-syntax/functions/math/acos":{"id":"sql-syntax/functions/math/acos","title":"ACOS","description":"The ACOS function is used to calculate the arccosine (inverse cosine) of a number. It takes a single numeric argument, which should be a float value in the range of -1 to 1, and returns the arccosine of that number in radians.","sidebar":"sqlSyntaxSidebar"},"sql-syntax/functions/math/asin":{"id":"sql-syntax/functions/math/asin","title":"ASIN","description":"The ASIN function is used to calculate the arcsine (inverse sine) of a number. It takes a single numeric argument, which should be a float value in the range of -1 to 1, and returns the arcsine of that number in radians.","sidebar":"sqlSyntaxSidebar"},"sql-syntax/functions/math/atan":{"id":"sql-syntax/functions/math/atan","title":"ATAN","description":"The ATAN function is used to calculate the arctangent (inverse tangent) of a number. It takes a single numeric argument, and returns the arctangent of that number in radians.","sidebar":"sqlSyntaxSidebar"},"sql-syntax/functions/math/ceil":{"id":"sql-syntax/functions/math/ceil","title":"CEIL","description":"The CEIL function is used to round a number up to the nearest integer value. It takes a single floating-point or integer value as its argument and returns a floating-point value.","sidebar":"sqlSyntaxSidebar"},"sql-syntax/functions/math/cos":{"id":"sql-syntax/functions/math/cos","title":"COS","description":"The COS function is used to calculate the cosine of a number. It takes a single numeric argument (angle in radians) and returns the cosine of that angle.","sidebar":"sqlSyntaxSidebar"},"sql-syntax/functions/math/degrees":{"id":"sql-syntax/functions/math/degrees","title":"DEGREES","description":"The DEGREES function is used to convert a given angle value from radians to degrees. It takes a single numeric argument (angle in radians) and returns the angle in degrees.","sidebar":"sqlSyntaxSidebar"},"sql-syntax/functions/math/div":{"id":"sql-syntax/functions/math/div","title":"DIV","description":"The DIV function is used to perform integer division. It takes two arguments (a dividend and a divisor) and returns the integer quotient of the division operation. Both dividend and divisor can be FLOAT or INTEGER type. The return type of the function is INTEGER.","sidebar":"sqlSyntaxSidebar"},"sql-syntax/functions/math/exp":{"id":"sql-syntax/functions/math/exp","title":"EXP","description":"The EXP function is used to calculate the exponential value of a number. It takes a single FLOAT or INTEGER argument and returns a FLOAT value representing the exponential value of the given number.","sidebar":"sqlSyntaxSidebar"},"sql-syntax/functions/math/floor":{"id":"sql-syntax/functions/math/floor","title":"FLOOR","description":"The FLOOR function is used to round a number down to the nearest integer value. It takes a single floating-point or integer value as its argument and returns a floating-point value.","sidebar":"sqlSyntaxSidebar"},"sql-syntax/functions/math/gcd":{"id":"sql-syntax/functions/math/gcd","title":"GCD","description":"The GCD function is used to find the greatest common divisor (GCD) of two integers. It takes two INTEGER arguments and returns an INTEGER value representing the greatest common divisor of the given integers.","sidebar":"sqlSyntaxSidebar"},"sql-syntax/functions/math/lcm":{"id":"sql-syntax/functions/math/lcm","title":"LCM","description":"The LCM function is used to find the least common multiple (LCM) of two integers. It takes two INTEGER arguments and returns an INTEGER value representing the least common multiple of the given integers.","sidebar":"sqlSyntaxSidebar"},"sql-syntax/functions/math/ln":{"id":"sql-syntax/functions/math/ln","title":"LN","description":"The LN function is used to calculate the natural logarithm (base e) of a number. It takes a single FLOAT or INTEGER argument and returns a FLOAT value representing the natural logarithm of the given number.","sidebar":"sqlSyntaxSidebar"},"sql-syntax/functions/math/log":{"id":"sql-syntax/functions/math/log","title":"LOG","description":"The LOG function calculates the logarithm of a number with a specified base. It takes two FLOAT or INTEGER arguments and returns a FLOAT value representing the logarithm of the first argument with the base specified by the second argument.","sidebar":"sqlSyntaxSidebar"},"sql-syntax/functions/math/log10":{"id":"sql-syntax/functions/math/log10","title":"LOG10","description":"The LOG10 function is used to calculate the base-10 logarithm of a number. It takes a single FLOAT or INTEGER argument and returns a FLOAT value representing the base-10 logarithm of the given number.","sidebar":"sqlSyntaxSidebar"},"sql-syntax/functions/math/log2":{"id":"sql-syntax/functions/math/log2","title":"LOG2","description":"The LOG2 function is used to calculate the base-2 logarithm of a number. It takes a single FLOAT or INTEGER argument and returns a FLOAT value representing the base-2 logarithm of the given number.","sidebar":"sqlSyntaxSidebar"},"sql-syntax/functions/math/mod":{"id":"sql-syntax/functions/math/mod","title":"MOD","description":"The MOD function is used to calculate the remainder of a division operation. It takes two arguments (a dividend and a divisor) and returns the remainder of the division operation. Both dividend and divisor can be FLOAT or INTEGER type. The return type of the function is FLOAT.","sidebar":"sqlSyntaxSidebar"},"sql-syntax/functions/math/pi":{"id":"sql-syntax/functions/math/pi","title":"PI","description":"The PI function is used to retrieve the mathematical constant \u03c0 (pi), which is approximately 3.141592653589793. The function takes no arguments.","sidebar":"sqlSyntaxSidebar"},"sql-syntax/functions/math/power":{"id":"sql-syntax/functions/math/power","title":"POWER","description":"The POWER function is used to raise a number to the power of another number. It takes two arguments, the base and the exponent, both of which must be of the FLOAT type. The result will also be of the FLOAT type.","sidebar":"sqlSyntaxSidebar"},"sql-syntax/functions/math/radians":{"id":"sql-syntax/functions/math/radians","title":"RADIANS","description":"The RADIANS function is used to convert a given angle value from degrees to radians. It takes a single numeric argument (angle in degrees) and returns the angle in radians.","sidebar":"sqlSyntaxSidebar"},"sql-syntax/functions/math/rand":{"id":"sql-syntax/functions/math/rand","title":"RAND","description":"The RAND function is used to generate a random float value between 0 (inclusive) and 1 (exclusive). The function takes an optional seed value, which must be of the FLOAT type. If a seed value is provided, the random number generator will be initialized with that seed, producing a deterministic sequence of random numbers.","sidebar":"sqlSyntaxSidebar"},"sql-syntax/functions/math/round":{"id":"sql-syntax/functions/math/round","title":"ROUND","description":"The ROUND function is used to round a number to the nearest integer value. It takes a single floating-point or integer value as its argument and returns a floating-point value.","sidebar":"sqlSyntaxSidebar"},"sql-syntax/functions/math/sign":{"id":"sql-syntax/functions/math/sign","title":"SIGN","description":"The SIGN function is used to determine the sign of a number. It takes one argument, which must be of the FLOAT type. The result will be of the INTEGER type and can be -1, 0, or 1.","sidebar":"sqlSyntaxSidebar"},"sql-syntax/functions/math/sin":{"id":"sql-syntax/functions/math/sin","title":"SIN","description":"The SIN function is used to calculate the sine of a number. It takes a single numeric argument (angle in radians) and returns the sine of that angle.","sidebar":"sqlSyntaxSidebar"},"sql-syntax/functions/math/sqrt":{"id":"sql-syntax/functions/math/sqrt","title":"SQRT","description":"The SQRT function is used to calculate the square root of a number. It takes one argument, which must be of the FLOAT type. The result will also be of the FLOAT type.","sidebar":"sqlSyntaxSidebar"},"sql-syntax/functions/math/tan":{"id":"sql-syntax/functions/math/tan","title":"TAN","description":"The TAN function is used to calculate the tangent of a number. It takes a single numeric argument (angle in radians) and returns the tangent of that angle.","sidebar":"sqlSyntaxSidebar"},"sql-syntax/functions/others/cast":{"id":"sql-syntax/functions/others/cast","title":"CAST","description":"The CAST function is used to convert a value from one data type to another. It is commonly used when you need to change the data type of a value or a column to perform a specific operation, such as arithmetic or string concatenation.","sidebar":"sqlSyntaxSidebar"},"sql-syntax/functions/others/generate-uuid":{"id":"sql-syntax/functions/others/generate-uuid","title":"GENERATE_UUID","description":"The GENERATE_UUID function is an SQL function provided by GlueSQL that generates a new UUID (Universally Unique Identifier) using the version 4 UUID algorithm. A UUID is a 128-bit value used to uniquely identify items in various computing systems. Version 4 UUIDs are randomly generated and have 122 bits of randomness, which ensures a very low probability of collisions.","sidebar":"sqlSyntaxSidebar"},"sql-syntax/functions/others/ifnull":{"id":"sql-syntax/functions/others/ifnull","title":"IFNULL","description":"The IFNULL function is used to return the first non-null value among the provided expressions. It takes two arguments and checks if the first argument is NULL. If the first argument is NULL, it returns the second argument; otherwise, it returns the first argument.","sidebar":"sqlSyntaxSidebar"},"sql-syntax/functions/text/ascii":{"id":"sql-syntax/functions/text/ascii","title":"ASCII","description":"The ASCII function in SQL returns the ASCII value for the first character of the specified string.","sidebar":"sqlSyntaxSidebar"},"sql-syntax/functions/text/chr":{"id":"sql-syntax/functions/text/chr","title":"CHR","description":"The CHR function in SQL returns the character represented by the specified ASCII value.","sidebar":"sqlSyntaxSidebar"},"sql-syntax/functions/text/concat":{"id":"sql-syntax/functions/text/concat","title":"CONCAT","description":"The CONCAT function in SQL concatenates two or more strings into one string.","sidebar":"sqlSyntaxSidebar"},"sql-syntax/functions/text/concat-ws":{"id":"sql-syntax/functions/text/concat-ws","title":"CONCAT_WS","description":"The CONCAT_WS function in SQL concatenates two or more strings into one string with a separator.","sidebar":"sqlSyntaxSidebar"},"sql-syntax/functions/text/find-idx":{"id":"sql-syntax/functions/text/find-idx","title":"FIND_IDX","description":"The FIND_IDX function in SQL is used to return the position of the first occurrence of a substring in a string, optionally after a specified position.","sidebar":"sqlSyntaxSidebar"},"sql-syntax/functions/text/initcap":{"id":"sql-syntax/functions/text/initcap","title":"INITCAP","description":"The INITCAP function in SQL is used to capitalize the first letter of each word in a string and convert the rest of the characters to lowercase.","sidebar":"sqlSyntaxSidebar"},"sql-syntax/functions/text/left":{"id":"sql-syntax/functions/text/left","title":"LEFT","description":"The LEFT function in SQL returns the specified number of characters from the start (left side) of a given string.","sidebar":"sqlSyntaxSidebar"},"sql-syntax/functions/text/lower":{"id":"sql-syntax/functions/text/lower","title":"LOWER","description":"The LOWER function in SQL returns a string in which all alphabetic characters in a specified string are converted to lowercase.","sidebar":"sqlSyntaxSidebar"},"sql-syntax/functions/text/lpad":{"id":"sql-syntax/functions/text/lpad","title":"LPAD","description":"The LPAD function in SQL pads the left side of a string with a specific set of characters.","sidebar":"sqlSyntaxSidebar"},"sql-syntax/functions/text/ltrim":{"id":"sql-syntax/functions/text/ltrim","title":"LTRIM","description":"The LTRIM function in SQL removes characters from the left (leading side) of a string.","sidebar":"sqlSyntaxSidebar"},"sql-syntax/functions/text/position":{"id":"sql-syntax/functions/text/position","title":"POSITION","description":"The POSITION function in SQL is used to find the position of a substring in a string. The position of the first occurrence of the substring is returned. If the substring is not found, this function returns 0.","sidebar":"sqlSyntaxSidebar"},"sql-syntax/functions/text/repeat":{"id":"sql-syntax/functions/text/repeat","title":"REPEAT","description":"The REPEAT function in SQL is used to repeat a string for a specified number of times.","sidebar":"sqlSyntaxSidebar"},"sql-syntax/functions/text/reverse":{"id":"sql-syntax/functions/text/reverse","title":"REVERSE","description":"The REVERSE function in SQL is used to reverse a string.","sidebar":"sqlSyntaxSidebar"},"sql-syntax/functions/text/right":{"id":"sql-syntax/functions/text/right","title":"RIGHT","description":"The RIGHT function in SQL returns the specified number of characters from the end (right side) of a given string.","sidebar":"sqlSyntaxSidebar"},"sql-syntax/functions/text/rpad":{"id":"sql-syntax/functions/text/rpad","title":"RPAD","description":"The RPAD function in SQL pads the right side of a string with a specific set of characters.","sidebar":"sqlSyntaxSidebar"},"sql-syntax/functions/text/rtrim":{"id":"sql-syntax/functions/text/rtrim","title":"RTRIM","description":"The RTRIM function in SQL removes characters from the right (trailing side) of a string.","sidebar":"sqlSyntaxSidebar"},"sql-syntax/functions/text/substr":{"id":"sql-syntax/functions/text/substr","title":"SUBSTR","description":"The SUBSTR function in SQL is used to extract a substring from a string.","sidebar":"sqlSyntaxSidebar"},"sql-syntax/functions/text/trim":{"id":"sql-syntax/functions/text/trim","title":"TRIM","description":"The TRIM function in SQL is used to remove leading, trailing, or both leading and trailing unwanted characters (often whitespace) from a string.","sidebar":"sqlSyntaxSidebar"},"sql-syntax/functions/text/upper":{"id":"sql-syntax/functions/text/upper","title":"UPPER","description":"The UPPER function in SQL converts all lowercase alphabetic characters in a specified string to uppercase.","sidebar":"sqlSyntaxSidebar"},"sql-syntax/intro":{"id":"sql-syntax/intro","title":"Introduction","description":"Welcome to the Introduction page for the SQL Syntax category in GlueSQL! In this section, we\'ll provide a brief overview of the SQL syntax supported by GlueSQL. You can find more in-depth examples and details by browsing the other pages in this category.","sidebar":"sqlSyntaxSidebar"},"sql-syntax/statements/data-definition/alter-table":{"id":"sql-syntax/statements/data-definition/alter-table","title":"ALTER TABLE","description":"The ALTER TABLE statement is an SQL command used to modify the structure of an existing table in a database. This operation is useful when you need to add, remove, or modify columns or constraints in a table. In this document, we\'ll explain the syntax and usage of the ALTER TABLE statement, including the RENAME, ADD COLUMN, and DROP COLUMN clauses.","sidebar":"sqlSyntaxSidebar"},"sql-syntax/statements/data-definition/create-index":{"id":"sql-syntax/statements/data-definition/create-index","title":"CREATE INDEX","description":"CREATE INDEX statement is used to create an index on one or more columns of a table. Indexes can improve query performance by allowing the database to quickly locate rows with specific column values. They can also be used with the ORDER BY clause to improve sorting performance. An index can be thought of as a data structure that maps the values of a specific column or columns to the corresponding rows in a table. This mapping allows the database to perform lookups and sorting operations more efficiently, as it does not have to scan the entire table.","sidebar":"sqlSyntaxSidebar"},"sql-syntax/statements/data-definition/create-table":{"id":"sql-syntax/statements/data-definition/create-table","title":"CREATE TABLE","description":"The CREATE TABLE statement is a fundamental SQL command used to create a new table in a database. Tables are the primary structure in databases, as they hold the data organized in rows and columns. In this document, we\'ll explain the syntax and usage of the CREATE TABLE statement, including the IF NOT EXISTS clause.","sidebar":"sqlSyntaxSidebar"},"sql-syntax/statements/data-definition/drop-index":{"id":"sql-syntax/statements/data-definition/drop-index","title":"DROP INDEX","description":"DROP INDEX statement is used to remove an existing index from a table. This can be useful when an index is no longer needed, or if you want to free up storage space and reduce maintenance overhead associated with maintaining the index.","sidebar":"sqlSyntaxSidebar"},"sql-syntax/statements/data-definition/drop-table":{"id":"sql-syntax/statements/data-definition/drop-table","title":"DROP TABLE","description":"The DROP TABLE statement is an SQL command used to remove one or more tables from a database. This operation is useful when you no longer need a table or want to clear out old data structures. In this document, we\'ll explain the syntax and usage of the DROP TABLE statement, including the IF EXISTS clause and dropping multiple tables at once.","sidebar":"sqlSyntaxSidebar"},"sql-syntax/statements/data-manipulation/delete":{"id":"sql-syntax/statements/data-manipulation/delete","title":"DELETE","description":"The DELETE statement is used to remove records from a table. You can delete a single row, multiple rows, or all rows at once based on specific conditions.","sidebar":"sqlSyntaxSidebar"},"sql-syntax/statements/data-manipulation/insert":{"id":"sql-syntax/statements/data-manipulation/insert","title":"INSERT","description":"The INSERT statement is used to insert new records into a table. You can insert a single row or multiple rows at once, and you can also use the NULL, NOT NULL, and DEFAULT constraints to define how values are inserted.","sidebar":"sqlSyntaxSidebar"},"sql-syntax/statements/data-manipulation/update":{"id":"sql-syntax/statements/data-manipulation/update","title":"UPDATE","description":"The UPDATE statement is used to modify existing records in a table. You can update one or more columns with new values, or even use subqueries to update values based on other tables.","sidebar":"sqlSyntaxSidebar"},"sql-syntax/statements/metadata/data-dictionary":{"id":"sql-syntax/statements/metadata/data-dictionary","title":"Data Dictionary","description":"In GlueSQL, there are predefined tables, also known as Data Dictionary tables, which store metadata about the database objects like tables, columns, and indexes. These tables can be queried like any other table in the database, and they provide useful information about the database schema.","sidebar":"sqlSyntaxSidebar"},"sql-syntax/statements/metadata/show-tables":{"id":"sql-syntax/statements/metadata/show-tables","title":"SHOW TABLES","description":"The SHOW TABLES statement in GlueSQL is used to display a list of tables available in the database. This statement is useful when you want to inspect the current structure of your database or when you want to manage multiple tables.","sidebar":"sqlSyntaxSidebar"},"sql-syntax/statements/querying/aggregation":{"id":"sql-syntax/statements/querying/aggregation","title":"Aggregation","description":"GlueSQL supports several aggregate functions to perform calculations on a set of values. Below is a list of supported aggregate functions along with a brief explanation of each:","sidebar":"sqlSyntaxSidebar"},"sql-syntax/statements/querying/join":{"id":"sql-syntax/statements/querying/join","title":"JOIN","description":"GlueSQL supports two types of JOIN operations:","sidebar":"sqlSyntaxSidebar"},"sql-syntax/statements/querying/limit":{"id":"sql-syntax/statements/querying/limit","title":"LIMIT & OFFSET","description":"LIMIT and OFFSET are SQL clauses that allow you to control the number of rows returned by a SELECT statement. They are particularly useful when you need to paginate or retrieve a specific portion of the result set.","sidebar":"sqlSyntaxSidebar"},"sql-syntax/statements/querying/schemaless":{"id":"sql-syntax/statements/querying/schemaless","title":"Schemaless Data","description":"GlueSQL is an SQL database that provides a unique feature: it allows you to work with schemaless data, similar to NoSQL databases. Please note this point in the documentation.","sidebar":"sqlSyntaxSidebar"},"sql-syntax/statements/querying/where":{"id":"sql-syntax/statements/querying/where","title":"WHERE","description":"In GlueSQL, the WHERE clause is used to filter the results of a SELECT query based on specific conditions. The WHERE clause can be used with various operators and functions to create complex filtering conditions.","sidebar":"sqlSyntaxSidebar"},"sql-syntax/statements/transaction":{"id":"sql-syntax/statements/transaction","title":"Transaction","description":"Transactions in SQL are a series of queries that are executed as a single unit of work. In GlueSQL, transactions help to ensure the consistency and integrity of the database. They follow the ACID properties: Atomicity, Consistency, Isolation, and Durability.","sidebar":"sqlSyntaxSidebar"},"storages/developing-custom-storages/intro":{"id":"storages/developing-custom-storages/intro","title":"Introduction","description":"With GlueSQL, you can adapt SQL and the AST Builder to a wide variety of environments. This includes file systems, key-value databases, complex NoSQL databases, and even remote APIs. As long as a system supports reading, it can support SELECT queries. If it supports both reading and writing, it can support most SQL operations, including UPDATE and DELETE.","sidebar":"customStorageSidebar"},"storages/developing-custom-storages/store-traits/alter-table":{"id":"storages/developing-custom-storages/store-traits/alter-table","title":"AlterTable","description":"The AlterTable trait corresponds to the SQL ALTER TABLE statement and is used for modifying existing schemas. It is not necessary to implement the AlterTable trait. If you are dealing with data that is difficult to modify schema-wise or schemaless data, there is no need to implement the AlterTable trait. It is an optional trait that custom storage developers can choose to implement.","sidebar":"customStorageSidebar"},"storages/developing-custom-storages/store-traits/custom-function":{"id":"storages/developing-custom-storages/store-traits/custom-function","title":"CustomFunction","description":"The CustomFunction trait is an optional trait for supporting user-level custom functions. Through the CustomFunction trait, you can retrieve custom functions stored in the storage system. You can choose to implement the CustomFunction trait alone or together with the CustomFunctionMut trait.","sidebar":"customStorageSidebar"},"storages/developing-custom-storages/store-traits/custom-function-mut":{"id":"storages/developing-custom-storages/store-traits/custom-function-mut","title":"CustomFunctionMut","description":"By implementing both the CustomFunction and CustomFunctionMut traits, users can create, use, and delete user-level custom functions. Although GlueSQL plans to continuously add various functions, users may still find them insufficient. In such cases, users can create their own user-level custom functions to supplement the built-in functions. Additionally, if there are repetitive business logic codes, they can be stored as custom functions.","sidebar":"customStorageSidebar"},"storages/developing-custom-storages/store-traits/index-mut":{"id":"storages/developing-custom-storages/store-traits/index-mut","title":"IndexMut","description":"The IndexMut trait, when implemented along with the Index trait, allows custom storage developers to provide users with the ability to create, use, and delete non-clustered indexes. Implementing the IndexMut trait enhances the storage system\'s capabilities by providing support for dynamic index management.","sidebar":"customStorageSidebar"},"storages/developing-custom-storages/store-traits/index-trait":{"id":"storages/developing-custom-storages/store-traits/index-trait","title":"Index","description":"The Index trait is designed to support non-clustered indexes. If you only need to support pre-built non-clustered indexes, implementing the Index trait without the IndexMut trait is sufficient. Note that clustered indexes (PRIMARY KEY) are automatically supported by the Store & StoreMut implementations. The Index trait is specifically for non-clustered index support.","sidebar":"customStorageSidebar"},"storages/developing-custom-storages/store-traits/metadata":{"id":"storages/developing-custom-storages/store-traits/metadata","title":"Metadata","description":"The Metadata trait is an optional implementation for providing additional metadata support in GlueSQL. GlueSQL does not enforce any specific metadata implementation, allowing custom storage developers to decide which type of metadata, such as create time, modify time, etc., they want to provide.","sidebar":"customStorageSidebar"},"storages/developing-custom-storages/store-traits/store":{"id":"storages/developing-custom-storages/store-traits/store","title":"Store","description":"The Store trait is the most essential trait to implement for custom storage. Simply by implementing the Store trait, you can support SELECT queries in SQL. You may want to analyze and retrieve data from log files or external APIs using SQL. In this case, having only SELECT queries available is sufficient, and there might not be any need for data modification. In such scenarios, implementing GlueSQL\'s Store trait alone would be adequate.","sidebar":"customStorageSidebar"},"storages/developing-custom-storages/store-traits/store-mut":{"id":"storages/developing-custom-storages/store-traits/store-mut","title":"StoreMut","description":"While the Store trait is for supporting SELECT queries and reading data, the StoreMut trait is for modifying data. Implementing the StoreMut trait requires the implementation of the Store trait as well. By implementing both the Store and StoreMut traits, you can support most of the commonly used SQL statements. Additionally, you can use the Test Suite to utilize the integration test set provided by GlueSQL. Custom storage developers can verify their own Store & StoreMut implementations by checking if they pass all the tests provided in the Test Suite.","sidebar":"customStorageSidebar"},"storages/developing-custom-storages/store-traits/transaction":{"id":"storages/developing-custom-storages/store-traits/transaction","title":"Transaction","description":"While transactions are often considered an essential feature for databases, GlueSQL treats transactions as an optional trait. Custom storage developers can choose whether or not to support transactions in their storage implementation. Transactions can be quite heavy and expensive in terms of performance.","sidebar":"customStorageSidebar"},"storages/developing-custom-storages/using-test-suite":{"id":"storages/developing-custom-storages/using-test-suite","title":"Using the Test Suite","description":"The GlueSQL Test Suite is a valuable tool for validating your custom storage implementation. By using the provided test sets, you can ensure that your storage implementation adheres to the required specifications and works as expected with GlueSQL.","sidebar":"customStorageSidebar"},"storages/intro":{"id":"storages/intro","title":"Introduction","description":"GlueSQL is not only suitable for use as a conventional database, but one of its key features is the ability for anyone to easily adapt SQL and the AST Builder to their desired file or storage system. This adaptability is achieved through the following topics covered in this section:","sidebar":"customStorageSidebar"},"storages/supported-storages/composite-storage":{"id":"storages/supported-storages/composite-storage","title":"Composite Storage","description":"Introduction","sidebar":"customStorageSidebar"},"storages/supported-storages/idb-storage":{"id":"storages/supported-storages/idb-storage","title":"IndexedDB Storage","description":"Introduction","sidebar":"customStorageSidebar"},"storages/supported-storages/json-storage":{"id":"storages/supported-storages/json-storage","title":"JSON Storage","description":"Introduction","sidebar":"customStorageSidebar"},"storages/supported-storages/memory-storage":{"id":"storages/supported-storages/memory-storage","title":"Memory Storage","description":"MemoryStorage is a foundational storage option designed for in-memory, non-persistent data. Despite its simplicity, it is robust enough for use in production environments.","sidebar":"customStorageSidebar"},"storages/supported-storages/shared-memory-storage":{"id":"storages/supported-storages/shared-memory-storage","title":"Shared Memory Storage","description":"SharedMemoryStorage is a storage option designed to provide more comfortable usage of MemoryStorage in concurrent environments. Although it doesn\'t operate in parallel, it makes accessing the same data from multiple threads simultaneously more convenient.","sidebar":"customStorageSidebar"},"storages/supported-storages/sled-storage":{"id":"storages/supported-storages/sled-storage","title":"Sled Storage","description":"SledStorage is currently the representative persistent data storage for GlueSQL. As the name suggests, it\'s a storage option based on the Sled key-value embedded database built in Rust (Sled on Github).","sidebar":"customStorageSidebar"},"storages/supported-storages/web-storage":{"id":"storages/supported-storages/web-storage","title":"WebStorage (local & session)","description":"WebStorage - yes, the localStorage and sessionStorage you\'re familiar with. With GlueSQL, you can use SQL to interact with these storages!","sidebar":"customStorageSidebar"},"tutorial-basics/congratulations":{"id":"tutorial-basics/congratulations","title":"Congratulations!","description":"You have just learned the basics of Docusaurus and made some changes to the initial template.","sidebar":"tutorialSidebar"},"tutorial-basics/create-a-blog-post":{"id":"tutorial-basics/create-a-blog-post","title":"Create a Blog Post","description":"Docusaurus creates a page for each blog post, but also a blog index page, a tag system, an RSS feed...","sidebar":"tutorialSidebar"},"tutorial-basics/create-a-document":{"id":"tutorial-basics/create-a-document","title":"Create a Document","description":"Documents are groups of pages connected through:","sidebar":"tutorialSidebar"},"tutorial-basics/create-a-page":{"id":"tutorial-basics/create-a-page","title":"Create a Page","description":"Add Markdown or React files to src/pages to create a standalone page:","sidebar":"tutorialSidebar"},"tutorial-basics/deploy-your-site":{"id":"tutorial-basics/deploy-your-site","title":"Deploy your site","description":"Docusaurus is a static-site-generator (also called Jamstack).","sidebar":"tutorialSidebar"},"tutorial-basics/markdown-features":{"id":"tutorial-basics/markdown-features","title":"Markdown Features","description":"Docusaurus supports Markdown and a few additional features.","sidebar":"tutorialSidebar"},"tutorial-extras/manage-docs-versions":{"id":"tutorial-extras/manage-docs-versions","title":"Manage Docs Versions","description":"Docusaurus can manage multiple versions of your docs."},"tutorial-extras/translate-your-site":{"id":"tutorial-extras/translate-your-site","title":"Translate your site","description":"Let\'s translate docs/intro.md to French."}}}')}}]);